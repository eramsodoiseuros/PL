
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BIGEQUAL CALL COMMENT DEFINE DO ELSE EQUALS FALSE FUNC ID IF INT LESSEREQUAL NOTEQUALS NUM OR PAL STDIN STDOUT TRUE WHILEPrograma : BlocosCodigoBlocosCodigo  :  Codigo BlocosCodigo  :  BlocosCodigo Codigo Codigo  :  Declaracao Declaracao :  INT ID ';' Declaracao :  INT ID '=' Expressao ';'Declaracao :  INT BlocoLerSTDIN Codigo  : Atribuicao   Atribuicao : ID '=' Expressao ';'  Atribuicao : ID '=' Bloco_CALLFUNC  Expressao : Var  Var : NUM  Var : ID  Var : TRUE  Var : FALSE  Expressao : Expressao Operador Var  Expressao : '(' Expressao  ')'  Operador : '+'  Operador : '-'  Operador : '*'  Operador : '/'  Operador : '%' Codigo  : BlocoIF BlocoIF : IF '(' ListaCondicionais ')' '{' BlocosCodigo '}'  BlocoIF : IF '(' ListaCondicionais ')' '{' BlocosCodigo '}' ELSE '{' BlocosCodigo '}' ListaCondicionais : Condicional ListaCondicionais : '(' ListaCondicionais ')' ListaCondicionais : '!' '(' ListaCondicionais ')' ListaCondicionais : ListaCondicionais OperadorLogico CondicionalOperadorLogico : ANDOperadorLogico : ORCondicional : VarCondicional : '!' '(' Condicional ')'Condicional : '(' Condicional ')'Condicional : Condicional OperadorCondicional CondicionalOperadorCondicional : '>'OperadorCondicional : BIGEQUAL OperadorCondicional : '<'OperadorCondicional : LESSEREQUALOperadorCondicional : EQUALSOperadorCondicional : NOTEQUALSCodigo  : BlocoWhileDo BlocoWhileDo : WHILE  '(' ListaCondicionais ')' DO '{' BlocosCodigo '}'  Codigo  : BlocoLerSTDIN BlocoLerSTDIN : ID '=' STDIN '(' ')' ';' Codigo  : Bloco_EscreverSTDOUT Bloco_EscreverSTDOUT : STDOUT '(' Var ')' ';'  Bloco_EscreverSTDOUT : STDOUT '(' PAL ')' ';' Codigo  : Bloco_Comentario Bloco_Comentario : COMMENT Codigo  : Bloco_DEFINEFUNC Bloco_DEFINEFUNC : DEFINE FUNC '(' ')' '{' BlocosCodigo '}' Bloco_DEFINEFUNC : DEFINE FUNC '(' ListaAtributos  ')' '{' BlocosCodigo '}' ListaAtributos : Atributo ListaAtributos : ListaAtributos ',' Atributo Atributo : INTCodigo  : Bloco_CALLFUNC Bloco_CALLFUNC : CALL FUNC '(' ')' ';' Bloco_CALLFUNC : CALL FUNC '(' INPUTVar  ')' ';'  INPUTVar : Var  INPUTVar : INPUTVar ',' Var "
    
_lr_action_items = {'INT':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,49,52,85,91,99,100,101,103,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[13,13,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,81,-9,-6,13,-47,-48,13,81,-58,-45,13,13,13,13,-59,-24,13,-52,13,-43,-53,13,13,-25,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,18,21,23,24,25,26,27,30,31,34,36,41,50,52,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,74,85,91,94,99,100,101,104,106,107,108,109,113,114,115,117,119,121,122,123,125,126,127,128,129,],[14,14,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,22,-50,-3,-7,32,32,32,32,-5,32,-10,32,32,32,-9,32,-18,-19,-20,-21,-22,32,-30,-31,32,-36,-37,-38,-39,-40,-41,32,-6,14,32,-47,-48,14,-58,32,-45,14,32,14,14,14,-59,-24,14,-52,14,-43,-53,14,14,-25,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,91,99,100,101,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[15,15,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,15,-47,-48,15,-58,-45,15,15,15,15,-59,-24,15,-52,15,-43,-53,15,15,-25,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,91,99,100,101,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[16,16,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,16,-47,-48,16,-58,-45,16,16,16,16,-59,-24,16,-52,16,-43,-53,16,16,-25,]),'STDOUT':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,91,99,100,101,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[17,17,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,17,-47,-48,17,-58,-45,17,17,17,17,-59,-24,17,-52,17,-43,-53,17,17,-25,]),'COMMENT':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,91,99,100,101,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[18,18,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,18,-47,-48,18,-58,-45,18,18,18,18,-59,-24,18,-52,18,-43,-53,18,18,-25,]),'DEFINE':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,91,99,100,101,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[19,19,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,19,-47,-48,19,-58,-45,19,19,19,19,-59,-24,19,-52,19,-43,-53,19,19,-25,]),'CALL':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,24,30,34,52,85,91,99,100,101,104,107,108,113,114,115,117,119,121,122,123,125,126,127,128,129,],[20,20,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,20,-5,-10,-9,-6,20,-47,-48,20,-58,-45,20,20,20,20,-59,-24,20,-52,20,-43,-53,20,20,-25,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,99,100,104,107,117,119,122,125,126,129,],[0,-1,-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,-47,-48,-58,-45,-59,-24,-52,-43,-53,-25,]),'}':([3,4,5,6,7,8,9,10,11,12,18,21,23,30,34,52,85,99,100,104,107,108,114,117,119,121,122,123,125,126,128,129,],[-2,-4,-8,-23,-42,-44,-46,-49,-51,-57,-50,-3,-7,-5,-10,-9,-6,-47,-48,-58,-45,119,122,-59,-24,125,-52,126,-43,-53,129,-25,]),'=':([14,22,],[24,31,]),'(':([15,16,17,24,25,26,28,29,31,35,36,41,44,64,65,66,67,68,69,70,71,72,73,74,93,94,109,],[25,26,27,36,41,41,49,50,36,59,36,41,74,94,-30,-31,94,-36,-37,-38,-39,-40,-41,41,109,94,94,]),'FUNC':([19,20,],[28,29,]),';':([22,32,33,37,38,39,40,51,76,77,82,86,87,88,105,],[30,-13,52,-11,-12,-14,-15,85,99,100,104,-16,107,-17,117,]),'STDIN':([24,31,],[35,35,]),'NUM':([24,25,26,27,31,36,41,50,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,74,94,106,109,],[38,38,38,38,38,38,38,38,38,-18,-19,-20,-21,-22,38,-30,-31,38,-36,-37,-38,-39,-40,-41,38,38,38,38,]),'TRUE':([24,25,26,27,31,36,41,50,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,74,94,106,109,],[39,39,39,39,39,39,39,39,39,-18,-19,-20,-21,-22,39,-30,-31,39,-36,-37,-38,-39,-40,-41,39,39,39,39,]),'FALSE':([24,25,26,27,31,36,41,50,53,54,55,56,57,58,64,65,66,67,68,69,70,71,72,73,74,94,106,109,],[40,40,40,40,40,40,40,40,40,-18,-19,-20,-21,-22,40,-30,-31,40,-36,-37,-38,-39,-40,-41,40,40,40,40,]),'!':([25,26,41,64,65,66,67,68,69,70,71,72,73,74,94,109,],[44,44,44,93,-30,-31,93,-36,-37,-38,-39,-40,-41,44,93,93,]),'PAL':([27,],[48,]),'+':([32,33,37,38,39,40,51,60,86,88,],[-13,54,-11,-12,-14,-15,54,54,-16,-17,]),'-':([32,33,37,38,39,40,51,60,86,88,],[-13,55,-11,-12,-14,-15,55,55,-16,-17,]),'*':([32,33,37,38,39,40,51,60,86,88,],[-13,56,-11,-12,-14,-15,56,56,-16,-17,]),'/':([32,33,37,38,39,40,51,60,86,88,],[-13,57,-11,-12,-14,-15,57,57,-16,-17,]),'%':([32,33,37,38,39,40,51,60,86,88,],[-13,58,-11,-12,-14,-15,58,58,-16,-17,]),'>':([32,38,39,40,43,45,62,90,92,95,97,110,112,120,],[-13,-12,-14,-15,68,-32,68,-34,68,68,68,68,-33,68,]),'BIGEQUAL':([32,38,39,40,43,45,62,90,92,95,97,110,112,120,],[-13,-12,-14,-15,69,-32,69,-34,69,69,69,69,-33,69,]),'<':([32,38,39,40,43,45,62,90,92,95,97,110,112,120,],[-13,-12,-14,-15,70,-32,70,-34,70,70,70,70,-33,70,]),'LESSEREQUAL':([32,38,39,40,43,45,62,90,92,95,97,110,112,120,],[-13,-12,-14,-15,71,-32,71,-34,71,71,71,71,-33,71,]),'EQUALS':([32,38,39,40,43,45,62,90,92,95,97,110,112,120,],[-13,-12,-14,-15,72,-32,72,-34,72,72,72,72,-33,72,]),'NOTEQUALS':([32,38,39,40,43,45,62,90,92,95,97,110,112,120,],[-13,-12,-14,-15,73,-32,73,-34,73,73,73,73,-33,73,]),')':([32,37,38,39,40,42,43,45,46,47,48,49,50,59,60,61,62,79,80,81,83,84,86,88,89,90,92,95,96,97,110,111,112,116,118,120,],[-13,-11,-12,-14,-15,63,-26,-32,75,76,77,78,82,87,88,89,90,102,-54,-56,105,-60,-16,-17,-27,-34,-29,-35,111,112,90,-28,-33,-55,-61,112,]),'AND':([32,38,39,40,42,43,45,46,61,62,89,90,92,95,96,97,111,112,],[-13,-12,-14,-15,65,-26,-32,65,65,-26,-27,-34,-29,-35,65,-26,-28,-33,]),'OR':([32,38,39,40,42,43,45,46,61,62,89,90,92,95,96,97,111,112,],[-13,-12,-14,-15,66,-26,-32,66,66,-26,-27,-34,-29,-35,66,-26,-28,-33,]),',':([32,38,39,40,79,80,81,83,84,116,118,],[-13,-12,-14,-15,103,-54,-56,106,-60,-55,-61,]),'{':([63,78,98,102,124,],[91,101,113,115,127,]),'DO':([75,],[98,]),'ELSE':([119,],[124,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'BlocosCodigo':([0,91,101,113,115,127,],[2,108,114,121,123,128,]),'Codigo':([0,2,91,101,108,113,114,115,121,123,127,128,],[3,21,3,3,21,3,21,3,21,21,3,21,]),'Declaracao':([0,2,91,101,108,113,114,115,121,123,127,128,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'Atribuicao':([0,2,91,101,108,113,114,115,121,123,127,128,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'BlocoIF':([0,2,91,101,108,113,114,115,121,123,127,128,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'BlocoWhileDo':([0,2,91,101,108,113,114,115,121,123,127,128,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'BlocoLerSTDIN':([0,2,13,91,101,108,113,114,115,121,123,127,128,],[8,8,23,8,8,8,8,8,8,8,8,8,8,]),'Bloco_EscreverSTDOUT':([0,2,91,101,108,113,114,115,121,123,127,128,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'Bloco_Comentario':([0,2,91,101,108,113,114,115,121,123,127,128,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'Bloco_DEFINEFUNC':([0,2,91,101,108,113,114,115,121,123,127,128,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'Bloco_CALLFUNC':([0,2,24,91,101,108,113,114,115,121,123,127,128,],[12,12,34,12,12,12,12,12,12,12,12,12,12,]),'Expressao':([24,31,36,],[33,51,60,]),'Var':([24,25,26,27,31,36,41,50,53,64,67,74,94,106,109,],[37,45,45,47,37,37,45,84,86,45,45,45,45,118,45,]),'ListaCondicionais':([25,26,41,74,],[42,46,61,96,]),'Condicional':([25,26,41,64,67,74,94,109,],[43,43,62,92,95,97,110,120,]),'Operador':([33,51,60,],[53,53,53,]),'OperadorLogico':([42,46,61,96,],[64,64,64,64,]),'OperadorCondicional':([43,62,92,95,97,110,120,],[67,67,67,67,67,67,67,]),'ListaAtributos':([49,],[79,]),'Atributo':([49,103,],[80,116,]),'INPUTVar':([50,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> BlocosCodigo','Programa',1,'p_Programa','PLTP2-lex-yacc-V05.py',24),
  ('BlocosCodigo -> Codigo','BlocosCodigo',1,'p_BlocoCodigo_fin','PLTP2-lex-yacc-V05.py',32),
  ('BlocosCodigo -> BlocosCodigo Codigo','BlocosCodigo',2,'p_BlocosCodigo_Rec','PLTP2-lex-yacc-V05.py',37),
  ('Codigo -> Declaracao','Codigo',1,'p_Codigo_Declaracao','PLTP2-lex-yacc-V05.py',46),
  ('Declaracao -> INT ID ;','Declaracao',3,'p_Declaracao','PLTP2-lex-yacc-V05.py',51),
  ('Declaracao -> INT ID = Expressao ;','Declaracao',5,'p_Declaracao_Atribuicao','PLTP2-lex-yacc-V05.py',57),
  ('Declaracao -> INT BlocoLerSTDIN','Declaracao',2,'p_Declaracao_STDIN','PLTP2-lex-yacc-V05.py',63),
  ('Codigo -> Atribuicao','Codigo',1,'p_Codigo_Atribuicao','PLTP2-lex-yacc-V05.py',71),
  ('Atribuicao -> ID = Expressao ;','Atribuicao',4,'p_Atribuicao','PLTP2-lex-yacc-V05.py',76),
  ('Atribuicao -> ID = Bloco_CALLFUNC','Atribuicao',3,'p_Atribuicao_FUNC','PLTP2-lex-yacc-V05.py',84),
  ('Expressao -> Var','Expressao',1,'p_Expressao_fin','PLTP2-lex-yacc-V05.py',94),
  ('Var -> NUM','Var',1,'p_Var_NUM','PLTP2-lex-yacc-V05.py',99),
  ('Var -> ID','Var',1,'p_Var_ID','PLTP2-lex-yacc-V05.py',105),
  ('Var -> TRUE','Var',1,'p_Var_TRUE','PLTP2-lex-yacc-V05.py',110),
  ('Var -> FALSE','Var',1,'p_Var_FALSE','PLTP2-lex-yacc-V05.py',115),
  ('Expressao -> Expressao Operador Var','Expressao',3,'p_Expressao_Rec1','PLTP2-lex-yacc-V05.py',123),
  ('Expressao -> ( Expressao )','Expressao',3,'p_Expressao_Rec2','PLTP2-lex-yacc-V05.py',128),
  ('Operador -> +','Operador',1,'p_Operador_MAIS','PLTP2-lex-yacc-V05.py',135),
  ('Operador -> -','Operador',1,'p_Operador_Minus','PLTP2-lex-yacc-V05.py',139),
  ('Operador -> *','Operador',1,'p_Operador_MUL','PLTP2-lex-yacc-V05.py',142),
  ('Operador -> /','Operador',1,'p_Operador_Div','PLTP2-lex-yacc-V05.py',145),
  ('Operador -> %','Operador',1,'p_Operador_Rest','PLTP2-lex-yacc-V05.py',148),
  ('Codigo -> BlocoIF','Codigo',1,'p_Codigo_BlocoIF','PLTP2-lex-yacc-V05.py',156),
  ('BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo }','BlocoIF',7,'p_BlocoIF','PLTP2-lex-yacc-V05.py',163),
  ('BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }','BlocoIF',11,'p_BlocoIF_ELSE','PLTP2-lex-yacc-V05.py',168),
  ('ListaCondicionais -> Condicional','ListaCondicionais',1,'p_ListaCondicionais_fin','PLTP2-lex-yacc-V05.py',174),
  ('ListaCondicionais -> ( ListaCondicionais )','ListaCondicionais',3,'p_ListaCondicionais_Capsulado','PLTP2-lex-yacc-V05.py',179),
  ('ListaCondicionais -> ! ( ListaCondicionais )','ListaCondicionais',4,'p_ListaCondicionais_Neg','PLTP2-lex-yacc-V05.py',184),
  ('ListaCondicionais -> ListaCondicionais OperadorLogico Condicional','ListaCondicionais',3,'p_ListaCondicionais_Rec','PLTP2-lex-yacc-V05.py',189),
  ('OperadorLogico -> AND','OperadorLogico',1,'p_OperadorLogico_AND','PLTP2-lex-yacc-V05.py',198),
  ('OperadorLogico -> OR','OperadorLogico',1,'p_OperadorLogico_OR','PLTP2-lex-yacc-V05.py',203),
  ('Condicional -> Var','Condicional',1,'p_Condicional_Var','PLTP2-lex-yacc-V05.py',211),
  ('Condicional -> ! ( Condicional )','Condicional',4,'p_Condicional_Neg','PLTP2-lex-yacc-V05.py',215),
  ('Condicional -> ( Condicional )','Condicional',3,'p_Condicional_Capsulado','PLTP2-lex-yacc-V05.py',221),
  ('Condicional -> Condicional OperadorCondicional Condicional','Condicional',3,'p_Condicional_OperadorCondicional','PLTP2-lex-yacc-V05.py',225),
  ('OperadorCondicional -> >','OperadorCondicional',1,'p_OperadorCondicional_Maior','PLTP2-lex-yacc-V05.py',234),
  ('OperadorCondicional -> BIGEQUAL','OperadorCondicional',1,'p_OperadorCondicional_BIGEQUAL','PLTP2-lex-yacc-V05.py',238),
  ('OperadorCondicional -> <','OperadorCondicional',1,'p_OperadorCondicional_MENOR','PLTP2-lex-yacc-V05.py',242),
  ('OperadorCondicional -> LESSEREQUAL','OperadorCondicional',1,'p_OperadorCondicional_LESSEREQUAL','PLTP2-lex-yacc-V05.py',246),
  ('OperadorCondicional -> EQUALS','OperadorCondicional',1,'p_OperadorCondicional_EQUALS','PLTP2-lex-yacc-V05.py',250),
  ('OperadorCondicional -> NOTEQUALS','OperadorCondicional',1,'p_OperadorCondicional_NOTEQUALS','PLTP2-lex-yacc-V05.py',255),
  ('Codigo -> BlocoWhileDo','Codigo',1,'p_Codigo_BlocoWhileDo','PLTP2-lex-yacc-V05.py',262),
  ('BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo }','BlocoWhileDo',8,'p_BlocoWhileDo','PLTP2-lex-yacc-V05.py',267),
  ('Codigo -> BlocoLerSTDIN','Codigo',1,'p_Codigo_LerSTDIN','PLTP2-lex-yacc-V05.py',273),
  ('BlocoLerSTDIN -> ID = STDIN ( ) ;','BlocoLerSTDIN',6,'p_BlocoLerSTDIN','PLTP2-lex-yacc-V05.py',278),
  ('Codigo -> Bloco_EscreverSTDOUT','Codigo',1,'p_Codigo_EscreverSTDOUT','PLTP2-lex-yacc-V05.py',285),
  ('Bloco_EscreverSTDOUT -> STDOUT ( Var ) ;','Bloco_EscreverSTDOUT',5,'p_Bloco_EscreverSTDOUT','PLTP2-lex-yacc-V05.py',289),
  ('Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ;','Bloco_EscreverSTDOUT',5,'p_Bloco_EscreverSTDOUT_PAL','PLTP2-lex-yacc-V05.py',296),
  ('Codigo -> Bloco_Comentario','Codigo',1,'p_Codigo_Comentario','PLTP2-lex-yacc-V05.py',304),
  ('Bloco_Comentario -> COMMENT','Bloco_Comentario',1,'p_Bloco_Comentario','PLTP2-lex-yacc-V05.py',309),
  ('Codigo -> Bloco_DEFINEFUNC','Codigo',1,'p_Codigo_DEFINEFUNC','PLTP2-lex-yacc-V05.py',318),
  ('Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo }','Bloco_DEFINEFUNC',7,'p_Bloco_DEFINEFUNC_EMPTY','PLTP2-lex-yacc-V05.py',323),
  ('Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }','Bloco_DEFINEFUNC',8,'p_Bloco_DEFINEFUNC_Atributos','PLTP2-lex-yacc-V05.py',329),
  ('ListaAtributos -> Atributo','ListaAtributos',1,'p_ListaAtributos_fin','PLTP2-lex-yacc-V05.py',335),
  ('ListaAtributos -> ListaAtributos , Atributo','ListaAtributos',3,'p_ListaAtributos_Rec','PLTP2-lex-yacc-V05.py',341),
  ('Atributo -> INT','Atributo',1,'p_Atributo','PLTP2-lex-yacc-V05.py',348),
  ('Codigo -> Bloco_CALLFUNC','Codigo',1,'p_Codigo_CALLFUNC','PLTP2-lex-yacc-V05.py',356),
  ('Bloco_CALLFUNC -> CALL FUNC ( ) ;','Bloco_CALLFUNC',5,'p_Bloco_CALLFUNC_EMPTY','PLTP2-lex-yacc-V05.py',361),
  ('Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ;','Bloco_CALLFUNC',6,'p_Bloco_CALLFUNC_Atributos','PLTP2-lex-yacc-V05.py',367),
  ('INPUTVar -> Var','INPUTVar',1,'p_INPUTVar_fin','PLTP2-lex-yacc-V05.py',372),
  ('INPUTVar -> INPUTVar , Var','INPUTVar',3,'p_INPUTVar_Rec','PLTP2-lex-yacc-V05.py',377),
]
