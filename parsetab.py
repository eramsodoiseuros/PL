
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BIGEQUAL CALL COMMENT DEFINE DO ELSE EQUALS FALSE FUNC ID IF INT LESSEREQUAL NOTEQUALS NUM OR STDIN STDOUT TRUE WHILEPrograma : BlocosCodigoBlocosCodigo  :  Codigo BlocosCodigo  :  BlocosCodigo Codigo Codigo  :  Declaracao Declaracao :  INT ID ';' Codigo  : Atribuicao   Atribuicao : ID '=' Expressao ';'  Atribuicao : ID '=' Bloco_CALLFUNC  Expressao : Var  Var : NUM  Var : ID  Var : TRUE  Var : FALSE  Expressao : Expressao Operador Var  Expressao : '(' Expressao  ')'  Operador : '+'  Operador : '-'  Operador : '*'  Operador : '/'  Operador : '%' Codigo  : BlocoIF BlocoIF : IF '(' ListaCondicionais ')' '{' BlocosCodigo '}'  BlocoIF : IF '(' ListaCondicionais ')' '{' BlocosCodigo '}' ELSE '{' BlocosCodigo '}' ListaCondicionais : Condicional ListaCondicionais : '(' ListaCondicionais ')' ListaCondicionais : '!' '(' ListaCondicionais ')' ListaCondicionais : ListaCondicionais OperadorLogico CondicionalOperadorLogico : ANDOperadorLogico : ORCondicional : VarCondicional : '!' '(' Condicional ')'Condicional : '(' Condicional ')'Condicional : Condicional OperadorCondicional CondicionalOperadorCondicional : '>'OperadorCondicional : BIGEQUAL OperadorCondicional : '<'OperadorCondicional : LESSEREQUALOperadorCondicional : EQUALSOperadorCondicional : NOTEQUALSCodigo  : BlocoWhileDo BlocoWhileDo : WHILE  '(' ListaCondicionais ')' DO '{' BlocosCodigo '}'  Codigo  : BlocoLerSTDIN BlocoLerSTDIN : ID '=' STDIN '(' ')' ';' Codigo  : Bloco_EscreverSTDOUT Bloco_EscreverSTDOUT : STDOUT '(' Var ')' ';' Codigo  : Bloco_Comentario Bloco_Comentario : COMMENT Codigo  : Bloco_DEFINEFUNC Bloco_DEFINEFUNC : DEFINE FUNC '(' ')' '{' BlocosCodigo '}' Bloco_DEFINEFUNC : DEFINE FUNC '(' ListaAtributos  ')' '{' BlocosCodigo '}' ListaAtributos : Atributo ListaAtributos : ListaAtributos ',' Atributo Atributo : INTCodigo  : Bloco_CALLFUNC Bloco_CALLFUNC : CALL FUNC '(' ')' ';' Bloco_CALLFUNC : CALL FUNC '(' INPUTVar  ')' ';'  INPUTVar : Var  INPUTVar : INPUTVar ',' Var "
    
_lr_action_items = {'INT':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,46,48,85,93,94,96,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[13,13,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,76,-7,13,-45,13,76,-55,-43,13,13,13,13,-56,-22,13,-49,13,-41,-50,13,13,-23,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,18,21,23,24,25,26,29,32,34,39,47,48,49,50,51,52,53,54,60,61,62,63,64,65,66,67,68,69,70,85,88,93,94,97,99,100,101,102,106,107,108,110,112,114,115,116,118,119,120,121,122,],[14,14,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,22,-47,-3,30,30,30,30,-5,-8,30,30,30,-7,30,-16,-17,-18,-19,-20,30,-28,-29,30,-34,-35,-36,-37,-38,-39,30,14,30,-45,14,-55,30,-43,14,30,14,14,14,-56,-22,14,-49,14,-41,-50,14,14,-23,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,85,93,94,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[15,15,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,15,-45,15,-55,-43,15,15,15,15,-56,-22,15,-49,15,-41,-50,15,15,-23,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,85,93,94,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[16,16,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,16,-45,16,-55,-43,16,16,16,16,-56,-22,16,-49,16,-41,-50,16,16,-23,]),'STDOUT':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,85,93,94,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[17,17,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,17,-45,17,-55,-43,17,17,17,17,-56,-22,17,-49,17,-41,-50,17,17,-23,]),'COMMENT':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,85,93,94,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[18,18,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,18,-45,18,-55,-43,18,18,18,18,-56,-22,18,-49,18,-41,-50,18,18,-23,]),'DEFINE':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,85,93,94,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[19,19,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,19,-45,19,-55,-43,19,19,19,19,-56,-22,19,-49,19,-41,-50,19,19,-23,]),'CALL':([0,2,3,4,5,6,7,8,9,10,11,12,18,21,23,29,32,48,85,93,94,97,100,101,106,107,108,110,112,114,115,116,118,119,120,121,122,],[20,20,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,20,-5,-8,-7,20,-45,20,-55,-43,20,20,20,20,-56,-22,20,-49,20,-41,-50,20,20,-23,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,93,97,100,110,112,115,118,119,122,],[0,-1,-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,-45,-55,-43,-56,-22,-49,-41,-50,-23,]),'}':([3,4,5,6,7,8,9,10,11,12,18,21,29,32,48,93,97,100,101,107,110,112,114,115,116,118,119,121,122,],[-2,-4,-6,-21,-40,-42,-44,-46,-48,-54,-47,-3,-5,-8,-7,-45,-55,-43,112,115,-56,-22,118,-49,119,-41,-50,122,-23,]),'=':([14,],[23,]),'(':([15,16,17,23,24,25,27,28,33,34,39,42,60,61,62,63,64,65,66,67,68,69,70,87,88,102,],[24,25,26,34,39,39,46,47,55,34,39,70,88,-28,-29,88,-34,-35,-36,-37,-38,-39,39,102,88,88,]),'FUNC':([19,20,],[27,28,]),';':([22,30,31,35,36,37,38,72,77,80,81,82,98,],[29,-11,48,-9,-10,-12,-13,93,97,-14,100,-15,110,]),'STDIN':([23,],[33,]),'NUM':([23,24,25,26,34,39,47,49,50,51,52,53,54,60,61,62,63,64,65,66,67,68,69,70,88,99,102,],[36,36,36,36,36,36,36,36,-16,-17,-18,-19,-20,36,-28,-29,36,-34,-35,-36,-37,-38,-39,36,36,36,36,]),'TRUE':([23,24,25,26,34,39,47,49,50,51,52,53,54,60,61,62,63,64,65,66,67,68,69,70,88,99,102,],[37,37,37,37,37,37,37,37,-16,-17,-18,-19,-20,37,-28,-29,37,-34,-35,-36,-37,-38,-39,37,37,37,37,]),'FALSE':([23,24,25,26,34,39,47,49,50,51,52,53,54,60,61,62,63,64,65,66,67,68,69,70,88,99,102,],[38,38,38,38,38,38,38,38,-16,-17,-18,-19,-20,38,-28,-29,38,-34,-35,-36,-37,-38,-39,38,38,38,38,]),'!':([24,25,39,60,61,62,63,64,65,66,67,68,69,70,88,102,],[42,42,42,87,-28,-29,87,-34,-35,-36,-37,-38,-39,42,87,87,]),'+':([30,31,35,36,37,38,56,80,82,],[-11,50,-9,-10,-12,-13,50,-14,-15,]),'-':([30,31,35,36,37,38,56,80,82,],[-11,51,-9,-10,-12,-13,51,-14,-15,]),'*':([30,31,35,36,37,38,56,80,82,],[-11,52,-9,-10,-12,-13,52,-14,-15,]),'/':([30,31,35,36,37,38,56,80,82,],[-11,53,-9,-10,-12,-13,53,-14,-15,]),'%':([30,31,35,36,37,38,56,80,82,],[-11,54,-9,-10,-12,-13,54,-14,-15,]),'>':([30,36,37,38,41,43,58,84,86,89,91,103,105,113,],[-11,-10,-12,-13,64,-30,64,-32,64,64,64,64,-31,64,]),'BIGEQUAL':([30,36,37,38,41,43,58,84,86,89,91,103,105,113,],[-11,-10,-12,-13,65,-30,65,-32,65,65,65,65,-31,65,]),'<':([30,36,37,38,41,43,58,84,86,89,91,103,105,113,],[-11,-10,-12,-13,66,-30,66,-32,66,66,66,66,-31,66,]),'LESSEREQUAL':([30,36,37,38,41,43,58,84,86,89,91,103,105,113,],[-11,-10,-12,-13,67,-30,67,-32,67,67,67,67,-31,67,]),'EQUALS':([30,36,37,38,41,43,58,84,86,89,91,103,105,113,],[-11,-10,-12,-13,68,-30,68,-32,68,68,68,68,-31,68,]),'NOTEQUALS':([30,36,37,38,41,43,58,84,86,89,91,103,105,113,],[-11,-10,-12,-13,69,-30,69,-32,69,69,69,69,-31,69,]),')':([30,35,36,37,38,40,41,43,44,45,46,47,55,56,57,58,74,75,76,78,79,80,82,83,84,86,89,90,91,103,104,105,109,111,113,],[-11,-9,-10,-12,-13,59,-24,-30,71,72,73,77,81,82,83,84,95,-51,-53,98,-57,-14,-15,-25,-32,-27,-33,104,105,84,-26,-31,-52,-58,105,]),'AND':([30,36,37,38,40,41,43,44,57,58,83,84,86,89,90,91,104,105,],[-11,-10,-12,-13,61,-24,-30,61,61,-24,-25,-32,-27,-33,61,-24,-26,-31,]),'OR':([30,36,37,38,40,41,43,44,57,58,83,84,86,89,90,91,104,105,],[-11,-10,-12,-13,62,-24,-30,62,62,-24,-25,-32,-27,-33,62,-24,-26,-31,]),',':([30,36,37,38,74,75,76,78,79,109,111,],[-11,-10,-12,-13,96,-51,-53,99,-57,-52,-58,]),'{':([59,73,92,95,117,],[85,94,106,108,120,]),'DO':([71,],[92,]),'ELSE':([112,],[117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'BlocosCodigo':([0,85,94,106,108,120,],[2,101,107,114,116,121,]),'Codigo':([0,2,85,94,101,106,107,108,114,116,120,121,],[3,21,3,3,21,3,21,3,21,21,3,21,]),'Declaracao':([0,2,85,94,101,106,107,108,114,116,120,121,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'Atribuicao':([0,2,85,94,101,106,107,108,114,116,120,121,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'BlocoIF':([0,2,85,94,101,106,107,108,114,116,120,121,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'BlocoWhileDo':([0,2,85,94,101,106,107,108,114,116,120,121,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'BlocoLerSTDIN':([0,2,85,94,101,106,107,108,114,116,120,121,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'Bloco_EscreverSTDOUT':([0,2,85,94,101,106,107,108,114,116,120,121,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'Bloco_Comentario':([0,2,85,94,101,106,107,108,114,116,120,121,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'Bloco_DEFINEFUNC':([0,2,85,94,101,106,107,108,114,116,120,121,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'Bloco_CALLFUNC':([0,2,23,85,94,101,106,107,108,114,116,120,121,],[12,12,32,12,12,12,12,12,12,12,12,12,12,]),'Expressao':([23,34,],[31,56,]),'Var':([23,24,25,26,34,39,47,49,60,63,70,88,99,102,],[35,43,43,45,35,43,79,80,43,43,43,43,111,43,]),'ListaCondicionais':([24,25,39,70,],[40,44,57,90,]),'Condicional':([24,25,39,60,63,70,88,102,],[41,41,58,86,89,91,103,113,]),'Operador':([31,56,],[49,49,]),'OperadorLogico':([40,44,57,90,],[60,60,60,60,]),'OperadorCondicional':([41,58,86,89,91,103,113,],[63,63,63,63,63,63,63,]),'ListaAtributos':([46,],[74,]),'Atributo':([46,96,],[75,109,]),'INPUTVar':([47,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> BlocosCodigo','Programa',1,'p_Programa','PLTP2-lex-yacc-V05.py',43),
  ('BlocosCodigo -> Codigo','BlocosCodigo',1,'p_BlocoCodigo_fin','PLTP2-lex-yacc-V05.py',51),
  ('BlocosCodigo -> BlocosCodigo Codigo','BlocosCodigo',2,'p_BlocosCodigo_Rec','PLTP2-lex-yacc-V05.py',56),
  ('Codigo -> Declaracao','Codigo',1,'p_Codigo_Declaracao','PLTP2-lex-yacc-V05.py',65),
  ('Declaracao -> INT ID ;','Declaracao',3,'p_Declaracao','PLTP2-lex-yacc-V05.py',70),
  ('Codigo -> Atribuicao','Codigo',1,'p_Codigo_Atribuicao','PLTP2-lex-yacc-V05.py',78),
  ('Atribuicao -> ID = Expressao ;','Atribuicao',4,'p_Atribuicao','PLTP2-lex-yacc-V05.py',83),
  ('Atribuicao -> ID = Bloco_CALLFUNC','Atribuicao',3,'p_Atribuicao_FUNC','PLTP2-lex-yacc-V05.py',91),
  ('Expressao -> Var','Expressao',1,'p_Expressao_fin','PLTP2-lex-yacc-V05.py',101),
  ('Var -> NUM','Var',1,'p_Var_NUM','PLTP2-lex-yacc-V05.py',106),
  ('Var -> ID','Var',1,'p_Var_ID','PLTP2-lex-yacc-V05.py',112),
  ('Var -> TRUE','Var',1,'p_Var_TRUE','PLTP2-lex-yacc-V05.py',117),
  ('Var -> FALSE','Var',1,'p_Var_FALSE','PLTP2-lex-yacc-V05.py',122),
  ('Expressao -> Expressao Operador Var','Expressao',3,'p_Expressao_Rec1','PLTP2-lex-yacc-V05.py',130),
  ('Expressao -> ( Expressao )','Expressao',3,'p_Expressao_Rec2','PLTP2-lex-yacc-V05.py',135),
  ('Operador -> +','Operador',1,'p_Operador_MAIS','PLTP2-lex-yacc-V05.py',140),
  ('Operador -> -','Operador',1,'p_Operador_Minus','PLTP2-lex-yacc-V05.py',144),
  ('Operador -> *','Operador',1,'p_Operador_MUL','PLTP2-lex-yacc-V05.py',147),
  ('Operador -> /','Operador',1,'p_Operador_Div','PLTP2-lex-yacc-V05.py',150),
  ('Operador -> %','Operador',1,'p_Operador_Rest','PLTP2-lex-yacc-V05.py',153),
  ('Codigo -> BlocoIF','Codigo',1,'p_Codigo_BlocoIF','PLTP2-lex-yacc-V05.py',159),
  ('BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo }','BlocoIF',7,'p_BlocoIF','PLTP2-lex-yacc-V05.py',166),
  ('BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }','BlocoIF',11,'p_BlocoIF_ELSE','PLTP2-lex-yacc-V05.py',171),
  ('ListaCondicionais -> Condicional','ListaCondicionais',1,'p_ListaCondicionais_fin','PLTP2-lex-yacc-V05.py',177),
  ('ListaCondicionais -> ( ListaCondicionais )','ListaCondicionais',3,'p_ListaCondicionais_Capsulado','PLTP2-lex-yacc-V05.py',182),
  ('ListaCondicionais -> ! ( ListaCondicionais )','ListaCondicionais',4,'p_ListaCondicionais_Neg','PLTP2-lex-yacc-V05.py',187),
  ('ListaCondicionais -> ListaCondicionais OperadorLogico Condicional','ListaCondicionais',3,'p_ListaCondicionais_Rec','PLTP2-lex-yacc-V05.py',192),
  ('OperadorLogico -> AND','OperadorLogico',1,'p_OperadorLogico_AND','PLTP2-lex-yacc-V05.py',201),
  ('OperadorLogico -> OR','OperadorLogico',1,'p_OperadorLogico_OR','PLTP2-lex-yacc-V05.py',206),
  ('Condicional -> Var','Condicional',1,'p_Condicional_Var','PLTP2-lex-yacc-V05.py',214),
  ('Condicional -> ! ( Condicional )','Condicional',4,'p_Condicional_Neg','PLTP2-lex-yacc-V05.py',218),
  ('Condicional -> ( Condicional )','Condicional',3,'p_Condicional_Capsulado','PLTP2-lex-yacc-V05.py',224),
  ('Condicional -> Condicional OperadorCondicional Condicional','Condicional',3,'p_Condicional_OperadorCondicional','PLTP2-lex-yacc-V05.py',228),
  ('OperadorCondicional -> >','OperadorCondicional',1,'p_OperadorCondicional_Maior','PLTP2-lex-yacc-V05.py',237),
  ('OperadorCondicional -> BIGEQUAL','OperadorCondicional',1,'p_OperadorCondicional_BIGEQUAL','PLTP2-lex-yacc-V05.py',241),
  ('OperadorCondicional -> <','OperadorCondicional',1,'p_OperadorCondicional_MENOR','PLTP2-lex-yacc-V05.py',245),
  ('OperadorCondicional -> LESSEREQUAL','OperadorCondicional',1,'p_OperadorCondicional_LESSEREQUAL','PLTP2-lex-yacc-V05.py',249),
  ('OperadorCondicional -> EQUALS','OperadorCondicional',1,'p_OperadorCondicional_EQUALS','PLTP2-lex-yacc-V05.py',253),
  ('OperadorCondicional -> NOTEQUALS','OperadorCondicional',1,'p_OperadorCondicional_NOTEQUALS','PLTP2-lex-yacc-V05.py',258),
  ('Codigo -> BlocoWhileDo','Codigo',1,'p_Codigo_BlocoWhileDo','PLTP2-lex-yacc-V05.py',265),
  ('BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo }','BlocoWhileDo',8,'p_BlocoWhileDo','PLTP2-lex-yacc-V05.py',270),
  ('Codigo -> BlocoLerSTDIN','Codigo',1,'p_Codigo_LerSTDIN','PLTP2-lex-yacc-V05.py',276),
  ('BlocoLerSTDIN -> ID = STDIN ( ) ;','BlocoLerSTDIN',6,'p_BlocoLerSTDIN','PLTP2-lex-yacc-V05.py',281),
  ('Codigo -> Bloco_EscreverSTDOUT','Codigo',1,'p_Codigo_EscreverSTDOUT','PLTP2-lex-yacc-V05.py',288),
  ('Bloco_EscreverSTDOUT -> STDOUT ( Var ) ;','Bloco_EscreverSTDOUT',5,'p_Bloco_EscreverSTDOUT','PLTP2-lex-yacc-V05.py',292),
  ('Codigo -> Bloco_Comentario','Codigo',1,'p_Codigo_Comentario','PLTP2-lex-yacc-V05.py',300),
  ('Bloco_Comentario -> COMMENT','Bloco_Comentario',1,'p_Bloco_Comentario','PLTP2-lex-yacc-V05.py',305),
  ('Codigo -> Bloco_DEFINEFUNC','Codigo',1,'p_Codigo_DEFINEFUNC','PLTP2-lex-yacc-V05.py',314),
  ('Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo }','Bloco_DEFINEFUNC',7,'p_Bloco_DEFINEFUNC_EMPTY','PLTP2-lex-yacc-V05.py',319),
  ('Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }','Bloco_DEFINEFUNC',8,'p_Bloco_DEFINEFUNC_Atributos','PLTP2-lex-yacc-V05.py',325),
  ('ListaAtributos -> Atributo','ListaAtributos',1,'p_ListaAtributos_fin','PLTP2-lex-yacc-V05.py',331),
  ('ListaAtributos -> ListaAtributos , Atributo','ListaAtributos',3,'p_ListaAtributos_Rec','PLTP2-lex-yacc-V05.py',337),
  ('Atributo -> INT','Atributo',1,'p_Atributo','PLTP2-lex-yacc-V05.py',344),
  ('Codigo -> Bloco_CALLFUNC','Codigo',1,'p_Codigo_CALLFUNC','PLTP2-lex-yacc-V05.py',352),
  ('Bloco_CALLFUNC -> CALL FUNC ( ) ;','Bloco_CALLFUNC',5,'p_Bloco_CALLFUNC_EMPTY','PLTP2-lex-yacc-V05.py',357),
  ('Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ;','Bloco_CALLFUNC',6,'p_Bloco_CALLFUNC_Atributos','PLTP2-lex-yacc-V05.py',363),
  ('INPUTVar -> Var','INPUTVar',1,'p_INPUTVar_fin','PLTP2-lex-yacc-V05.py',368),
  ('INPUTVar -> INPUTVar , Var','INPUTVar',3,'p_INPUTVar_Rec','PLTP2-lex-yacc-V05.py',373),
]
