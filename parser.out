Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> BlocosCodigo
Rule 2     BlocosCodigo -> Codigo
Rule 3     BlocosCodigo -> BlocosCodigo Codigo
Rule 4     Codigo -> Declaracao
Rule 5     Declaracao -> INT ID ;
Rule 6     Declaracao -> INT ID = Expressao ;
Rule 7     Declaracao -> INT BlocoLerSTDIN
Rule 8     Codigo -> Atribuicao
Rule 9     Atribuicao -> ID = Expressao ;
Rule 10    Atribuicao -> ID = Bloco_CALLFUNC
Rule 11    Expressao -> Var
Rule 12    Var -> NUM
Rule 13    Var -> ID
Rule 14    Var -> TRUE
Rule 15    Var -> FALSE
Rule 16    Expressao -> Expressao Operador Var
Rule 17    Expressao -> ( Expressao )
Rule 18    Operador -> +
Rule 19    Operador -> -
Rule 20    Operador -> *
Rule 21    Operador -> /
Rule 22    Operador -> %
Rule 23    Codigo -> BlocoIF
Rule 24    BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo }
Rule 25    BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
Rule 26    ListaCondicionais -> Condicional
Rule 27    ListaCondicionais -> ( ListaCondicionais )
Rule 28    ListaCondicionais -> ! ( ListaCondicionais )
Rule 29    ListaCondicionais -> ListaCondicionais OperadorLogico Condicional
Rule 30    OperadorLogico -> AND
Rule 31    OperadorLogico -> OR
Rule 32    Condicional -> Var
Rule 33    Condicional -> ! ( Condicional )
Rule 34    Condicional -> ( Condicional )
Rule 35    Condicional -> Condicional OperadorCondicional Condicional
Rule 36    OperadorCondicional -> >
Rule 37    OperadorCondicional -> BIGEQUAL
Rule 38    OperadorCondicional -> <
Rule 39    OperadorCondicional -> LESSEREQUAL
Rule 40    OperadorCondicional -> EQUALS
Rule 41    OperadorCondicional -> NOTEQUALS
Rule 42    Codigo -> BlocoWhileDo
Rule 43    BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo }
Rule 44    Codigo -> BlocoLerSTDIN
Rule 45    BlocoLerSTDIN -> ID = STDIN ( ) ;
Rule 46    BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ;
Rule 47    Codigo -> Bloco_EscreverSTDOUT
Rule 48    Bloco_EscreverSTDOUT -> STDOUT ( Var ) ;
Rule 49    Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ;
Rule 50    Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ;
Rule 51    Codigo -> Bloco_Comentario
Rule 52    Bloco_Comentario -> COMMENT
Rule 53    Codigo -> Bloco_Return
Rule 54    Bloco_Return -> RETURN ID ;
Rule 55    Bloco_Return -> RETURN NUM ;
Rule 56    Codigo -> Bloco_DEFINEFUNC
Rule 57    Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo }
Rule 58    Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
Rule 59    ListaAtributos -> Atributo
Rule 60    ListaAtributos -> ListaAtributos , Atributo
Rule 61    Atributo -> INT
Rule 62    Codigo -> Bloco_CALLFUNC
Rule 63    Bloco_CALLFUNC -> CALL FUNC ( ) ;
Rule 64    Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ;
Rule 65    INPUTVar -> Var
Rule 66    INPUTVar -> INPUTVar , Var
Rule 67    Codigo -> Array
Rule 68    Array -> ARRAYNUM NUM ID ;
Rule 69    Array -> ARRAYID ID ID ;
Rule 70    Codigo -> BlocoFOR
Rule 71    BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

Terminals, with rules where they appear

!                    : 28 33
%                    : 22
(                    : 17 24 25 27 28 33 34 43 45 46 48 49 50 57 58 63 64 71
)                    : 17 24 25 27 28 33 34 43 45 46 48 49 50 57 58 63 64 71
*                    : 20
+                    : 18
,                    : 60 66
-                    : 19
/                    : 21
;                    : 5 6 9 45 46 48 49 50 54 55 63 64 68 69
<                    : 38
=                    : 6 9 10 45 46
>                    : 36
AND                  : 30
ARRAYID              : 69
ARRAYNUM             : 68
BIGEQUAL             : 37
CALL                 : 63 64
COMMENT              : 52
DEFINE               : 57 58
DO                   : 43
ELSE                 : 25
EQUALS               : 40
FALSE                : 15
FOR                  : 71
FUNC                 : 57 58 63 64
ID                   : 5 6 9 10 13 45 46 46 50 50 54 68 69 69 71
IF                   : 24
IFELSE               : 25
INT                  : 5 6 7 61
LESSEREQUAL          : 39
NOTEQUALS            : 41
NUM                  : 12 55 68
OR                   : 31
PAL                  : 49
RETURN               : 54 55
STDIN                : 45 46
STDOUT               : 48 49 50
STRUCTARRAY          : 46 50
TRUE                 : 14
WHILE                : 43
error                : 
{                    : 24 25 25 43 57 58 71
}                    : 24 25 25 43 57 58 71

Nonterminals, with rules where they appear

Array                : 67
Atribuicao           : 8 71
Atributo             : 59 60
BlocoFOR             : 70
BlocoIF              : 23
BlocoLerSTDIN        : 7 44
BlocoWhileDo         : 42
Bloco_CALLFUNC       : 10 62
Bloco_Comentario     : 51
Bloco_DEFINEFUNC     : 56
Bloco_EscreverSTDOUT : 47
Bloco_Return         : 53
BlocosCodigo         : 1 3 24 25 25 43 57 58 71
Codigo               : 2 3
Condicional          : 26 29 33 34 35 35 71
Declaracao           : 4
Expressao            : 6 9 16 17
INPUTVar             : 64 66
ListaAtributos       : 58 60
ListaCondicionais    : 24 25 27 28 29 43
Operador             : 16
OperadorCondicional  : 35
OperadorLogico       : 29
Programa             : 0
Var                  : 11 16 32 48 65 66

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . BlocosCodigo
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Programa                       shift and go to state 1
    BlocosCodigo                   shift and go to state 2
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> BlocosCodigo .
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    $end            reduce using rule 1 (Programa -> BlocosCodigo .)
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 3

    (2) BlocosCodigo -> Codigo .

    INT             reduce using rule 2 (BlocosCodigo -> Codigo .)
    ID              reduce using rule 2 (BlocosCodigo -> Codigo .)
    IF              reduce using rule 2 (BlocosCodigo -> Codigo .)
    IFELSE          reduce using rule 2 (BlocosCodigo -> Codigo .)
    WHILE           reduce using rule 2 (BlocosCodigo -> Codigo .)
    STRUCTARRAY     reduce using rule 2 (BlocosCodigo -> Codigo .)
    STDOUT          reduce using rule 2 (BlocosCodigo -> Codigo .)
    COMMENT         reduce using rule 2 (BlocosCodigo -> Codigo .)
    RETURN          reduce using rule 2 (BlocosCodigo -> Codigo .)
    DEFINE          reduce using rule 2 (BlocosCodigo -> Codigo .)
    CALL            reduce using rule 2 (BlocosCodigo -> Codigo .)
    ARRAYNUM        reduce using rule 2 (BlocosCodigo -> Codigo .)
    ARRAYID         reduce using rule 2 (BlocosCodigo -> Codigo .)
    FOR             reduce using rule 2 (BlocosCodigo -> Codigo .)
    $end            reduce using rule 2 (BlocosCodigo -> Codigo .)
    }               reduce using rule 2 (BlocosCodigo -> Codigo .)


state 4

    (4) Codigo -> Declaracao .

    INT             reduce using rule 4 (Codigo -> Declaracao .)
    ID              reduce using rule 4 (Codigo -> Declaracao .)
    IF              reduce using rule 4 (Codigo -> Declaracao .)
    IFELSE          reduce using rule 4 (Codigo -> Declaracao .)
    WHILE           reduce using rule 4 (Codigo -> Declaracao .)
    STRUCTARRAY     reduce using rule 4 (Codigo -> Declaracao .)
    STDOUT          reduce using rule 4 (Codigo -> Declaracao .)
    COMMENT         reduce using rule 4 (Codigo -> Declaracao .)
    RETURN          reduce using rule 4 (Codigo -> Declaracao .)
    DEFINE          reduce using rule 4 (Codigo -> Declaracao .)
    CALL            reduce using rule 4 (Codigo -> Declaracao .)
    ARRAYNUM        reduce using rule 4 (Codigo -> Declaracao .)
    ARRAYID         reduce using rule 4 (Codigo -> Declaracao .)
    FOR             reduce using rule 4 (Codigo -> Declaracao .)
    $end            reduce using rule 4 (Codigo -> Declaracao .)
    }               reduce using rule 4 (Codigo -> Declaracao .)


state 5

    (8) Codigo -> Atribuicao .

    INT             reduce using rule 8 (Codigo -> Atribuicao .)
    ID              reduce using rule 8 (Codigo -> Atribuicao .)
    IF              reduce using rule 8 (Codigo -> Atribuicao .)
    IFELSE          reduce using rule 8 (Codigo -> Atribuicao .)
    WHILE           reduce using rule 8 (Codigo -> Atribuicao .)
    STRUCTARRAY     reduce using rule 8 (Codigo -> Atribuicao .)
    STDOUT          reduce using rule 8 (Codigo -> Atribuicao .)
    COMMENT         reduce using rule 8 (Codigo -> Atribuicao .)
    RETURN          reduce using rule 8 (Codigo -> Atribuicao .)
    DEFINE          reduce using rule 8 (Codigo -> Atribuicao .)
    CALL            reduce using rule 8 (Codigo -> Atribuicao .)
    ARRAYNUM        reduce using rule 8 (Codigo -> Atribuicao .)
    ARRAYID         reduce using rule 8 (Codigo -> Atribuicao .)
    FOR             reduce using rule 8 (Codigo -> Atribuicao .)
    $end            reduce using rule 8 (Codigo -> Atribuicao .)
    }               reduce using rule 8 (Codigo -> Atribuicao .)


state 6

    (23) Codigo -> BlocoIF .

    INT             reduce using rule 23 (Codigo -> BlocoIF .)
    ID              reduce using rule 23 (Codigo -> BlocoIF .)
    IF              reduce using rule 23 (Codigo -> BlocoIF .)
    IFELSE          reduce using rule 23 (Codigo -> BlocoIF .)
    WHILE           reduce using rule 23 (Codigo -> BlocoIF .)
    STRUCTARRAY     reduce using rule 23 (Codigo -> BlocoIF .)
    STDOUT          reduce using rule 23 (Codigo -> BlocoIF .)
    COMMENT         reduce using rule 23 (Codigo -> BlocoIF .)
    RETURN          reduce using rule 23 (Codigo -> BlocoIF .)
    DEFINE          reduce using rule 23 (Codigo -> BlocoIF .)
    CALL            reduce using rule 23 (Codigo -> BlocoIF .)
    ARRAYNUM        reduce using rule 23 (Codigo -> BlocoIF .)
    ARRAYID         reduce using rule 23 (Codigo -> BlocoIF .)
    FOR             reduce using rule 23 (Codigo -> BlocoIF .)
    $end            reduce using rule 23 (Codigo -> BlocoIF .)
    }               reduce using rule 23 (Codigo -> BlocoIF .)


state 7

    (42) Codigo -> BlocoWhileDo .

    INT             reduce using rule 42 (Codigo -> BlocoWhileDo .)
    ID              reduce using rule 42 (Codigo -> BlocoWhileDo .)
    IF              reduce using rule 42 (Codigo -> BlocoWhileDo .)
    IFELSE          reduce using rule 42 (Codigo -> BlocoWhileDo .)
    WHILE           reduce using rule 42 (Codigo -> BlocoWhileDo .)
    STRUCTARRAY     reduce using rule 42 (Codigo -> BlocoWhileDo .)
    STDOUT          reduce using rule 42 (Codigo -> BlocoWhileDo .)
    COMMENT         reduce using rule 42 (Codigo -> BlocoWhileDo .)
    RETURN          reduce using rule 42 (Codigo -> BlocoWhileDo .)
    DEFINE          reduce using rule 42 (Codigo -> BlocoWhileDo .)
    CALL            reduce using rule 42 (Codigo -> BlocoWhileDo .)
    ARRAYNUM        reduce using rule 42 (Codigo -> BlocoWhileDo .)
    ARRAYID         reduce using rule 42 (Codigo -> BlocoWhileDo .)
    FOR             reduce using rule 42 (Codigo -> BlocoWhileDo .)
    $end            reduce using rule 42 (Codigo -> BlocoWhileDo .)
    }               reduce using rule 42 (Codigo -> BlocoWhileDo .)


state 8

    (44) Codigo -> BlocoLerSTDIN .

    INT             reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    ID              reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    IF              reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    IFELSE          reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    WHILE           reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    STRUCTARRAY     reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    STDOUT          reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    COMMENT         reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    RETURN          reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    DEFINE          reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    CALL            reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    ARRAYNUM        reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    ARRAYID         reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    FOR             reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    $end            reduce using rule 44 (Codigo -> BlocoLerSTDIN .)
    }               reduce using rule 44 (Codigo -> BlocoLerSTDIN .)


state 9

    (47) Codigo -> Bloco_EscreverSTDOUT .

    INT             reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    ID              reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    IF              reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    IFELSE          reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    WHILE           reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    STRUCTARRAY     reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    STDOUT          reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    COMMENT         reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    RETURN          reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    DEFINE          reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    CALL            reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    ARRAYNUM        reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    ARRAYID         reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    FOR             reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    $end            reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)
    }               reduce using rule 47 (Codigo -> Bloco_EscreverSTDOUT .)


state 10

    (51) Codigo -> Bloco_Comentario .

    INT             reduce using rule 51 (Codigo -> Bloco_Comentario .)
    ID              reduce using rule 51 (Codigo -> Bloco_Comentario .)
    IF              reduce using rule 51 (Codigo -> Bloco_Comentario .)
    IFELSE          reduce using rule 51 (Codigo -> Bloco_Comentario .)
    WHILE           reduce using rule 51 (Codigo -> Bloco_Comentario .)
    STRUCTARRAY     reduce using rule 51 (Codigo -> Bloco_Comentario .)
    STDOUT          reduce using rule 51 (Codigo -> Bloco_Comentario .)
    COMMENT         reduce using rule 51 (Codigo -> Bloco_Comentario .)
    RETURN          reduce using rule 51 (Codigo -> Bloco_Comentario .)
    DEFINE          reduce using rule 51 (Codigo -> Bloco_Comentario .)
    CALL            reduce using rule 51 (Codigo -> Bloco_Comentario .)
    ARRAYNUM        reduce using rule 51 (Codigo -> Bloco_Comentario .)
    ARRAYID         reduce using rule 51 (Codigo -> Bloco_Comentario .)
    FOR             reduce using rule 51 (Codigo -> Bloco_Comentario .)
    $end            reduce using rule 51 (Codigo -> Bloco_Comentario .)
    }               reduce using rule 51 (Codigo -> Bloco_Comentario .)


state 11

    (53) Codigo -> Bloco_Return .

    INT             reduce using rule 53 (Codigo -> Bloco_Return .)
    ID              reduce using rule 53 (Codigo -> Bloco_Return .)
    IF              reduce using rule 53 (Codigo -> Bloco_Return .)
    IFELSE          reduce using rule 53 (Codigo -> Bloco_Return .)
    WHILE           reduce using rule 53 (Codigo -> Bloco_Return .)
    STRUCTARRAY     reduce using rule 53 (Codigo -> Bloco_Return .)
    STDOUT          reduce using rule 53 (Codigo -> Bloco_Return .)
    COMMENT         reduce using rule 53 (Codigo -> Bloco_Return .)
    RETURN          reduce using rule 53 (Codigo -> Bloco_Return .)
    DEFINE          reduce using rule 53 (Codigo -> Bloco_Return .)
    CALL            reduce using rule 53 (Codigo -> Bloco_Return .)
    ARRAYNUM        reduce using rule 53 (Codigo -> Bloco_Return .)
    ARRAYID         reduce using rule 53 (Codigo -> Bloco_Return .)
    FOR             reduce using rule 53 (Codigo -> Bloco_Return .)
    $end            reduce using rule 53 (Codigo -> Bloco_Return .)
    }               reduce using rule 53 (Codigo -> Bloco_Return .)


state 12

    (56) Codigo -> Bloco_DEFINEFUNC .

    INT             reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    ID              reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    IF              reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    IFELSE          reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    WHILE           reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    STRUCTARRAY     reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    STDOUT          reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    COMMENT         reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    RETURN          reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    DEFINE          reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    CALL            reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    ARRAYNUM        reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    ARRAYID         reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    FOR             reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    $end            reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)
    }               reduce using rule 56 (Codigo -> Bloco_DEFINEFUNC .)


state 13

    (62) Codigo -> Bloco_CALLFUNC .

    INT             reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    ID              reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    IF              reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    IFELSE          reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    WHILE           reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    STRUCTARRAY     reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    STDOUT          reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    COMMENT         reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    RETURN          reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    DEFINE          reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    CALL            reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    ARRAYNUM        reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    ARRAYID         reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    FOR             reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    $end            reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)
    }               reduce using rule 62 (Codigo -> Bloco_CALLFUNC .)


state 14

    (67) Codigo -> Array .

    INT             reduce using rule 67 (Codigo -> Array .)
    ID              reduce using rule 67 (Codigo -> Array .)
    IF              reduce using rule 67 (Codigo -> Array .)
    IFELSE          reduce using rule 67 (Codigo -> Array .)
    WHILE           reduce using rule 67 (Codigo -> Array .)
    STRUCTARRAY     reduce using rule 67 (Codigo -> Array .)
    STDOUT          reduce using rule 67 (Codigo -> Array .)
    COMMENT         reduce using rule 67 (Codigo -> Array .)
    RETURN          reduce using rule 67 (Codigo -> Array .)
    DEFINE          reduce using rule 67 (Codigo -> Array .)
    CALL            reduce using rule 67 (Codigo -> Array .)
    ARRAYNUM        reduce using rule 67 (Codigo -> Array .)
    ARRAYID         reduce using rule 67 (Codigo -> Array .)
    FOR             reduce using rule 67 (Codigo -> Array .)
    $end            reduce using rule 67 (Codigo -> Array .)
    }               reduce using rule 67 (Codigo -> Array .)


state 15

    (70) Codigo -> BlocoFOR .

    INT             reduce using rule 70 (Codigo -> BlocoFOR .)
    ID              reduce using rule 70 (Codigo -> BlocoFOR .)
    IF              reduce using rule 70 (Codigo -> BlocoFOR .)
    IFELSE          reduce using rule 70 (Codigo -> BlocoFOR .)
    WHILE           reduce using rule 70 (Codigo -> BlocoFOR .)
    STRUCTARRAY     reduce using rule 70 (Codigo -> BlocoFOR .)
    STDOUT          reduce using rule 70 (Codigo -> BlocoFOR .)
    COMMENT         reduce using rule 70 (Codigo -> BlocoFOR .)
    RETURN          reduce using rule 70 (Codigo -> BlocoFOR .)
    DEFINE          reduce using rule 70 (Codigo -> BlocoFOR .)
    CALL            reduce using rule 70 (Codigo -> BlocoFOR .)
    ARRAYNUM        reduce using rule 70 (Codigo -> BlocoFOR .)
    ARRAYID         reduce using rule 70 (Codigo -> BlocoFOR .)
    FOR             reduce using rule 70 (Codigo -> BlocoFOR .)
    $end            reduce using rule 70 (Codigo -> BlocoFOR .)
    }               reduce using rule 70 (Codigo -> BlocoFOR .)


state 16

    (5) Declaracao -> INT . ID ;
    (6) Declaracao -> INT . ID = Expressao ;
    (7) Declaracao -> INT . BlocoLerSTDIN
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;

    ID              shift and go to state 31
    STRUCTARRAY     shift and go to state 21

    BlocoLerSTDIN                  shift and go to state 32

state 17

    (9) Atribuicao -> ID . = Expressao ;
    (10) Atribuicao -> ID . = Bloco_CALLFUNC
    (45) BlocoLerSTDIN -> ID . = STDIN ( ) ;

    =               shift and go to state 33


state 18

    (24) BlocoIF -> IF . ( ListaCondicionais ) { BlocosCodigo }

    (               shift and go to state 34


state 19

    (25) BlocoIF -> IFELSE . ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }

    (               shift and go to state 35


state 20

    (43) BlocoWhileDo -> WHILE . ( ListaCondicionais ) DO { BlocosCodigo }

    (               shift and go to state 36


state 21

    (46) BlocoLerSTDIN -> STRUCTARRAY . ID ID = STDIN ( ) ;

    ID              shift and go to state 37


state 22

    (48) Bloco_EscreverSTDOUT -> STDOUT . ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> STDOUT . ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> STDOUT . ( STRUCTARRAY ID ID ) ;

    (               shift and go to state 38


state 23

    (52) Bloco_Comentario -> COMMENT .

    INT             reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    ID              reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    IF              reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    IFELSE          reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    WHILE           reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    STRUCTARRAY     reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    STDOUT          reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    COMMENT         reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    RETURN          reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    DEFINE          reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    CALL            reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    ARRAYNUM        reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    ARRAYID         reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    FOR             reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    $end            reduce using rule 52 (Bloco_Comentario -> COMMENT .)
    }               reduce using rule 52 (Bloco_Comentario -> COMMENT .)


state 24

    (54) Bloco_Return -> RETURN . ID ;
    (55) Bloco_Return -> RETURN . NUM ;

    ID              shift and go to state 39
    NUM             shift and go to state 40


state 25

    (57) Bloco_DEFINEFUNC -> DEFINE . FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> DEFINE . FUNC ( ListaAtributos ) { BlocosCodigo }

    FUNC            shift and go to state 41


state 26

    (63) Bloco_CALLFUNC -> CALL . FUNC ( ) ;
    (64) Bloco_CALLFUNC -> CALL . FUNC ( INPUTVar ) ;

    FUNC            shift and go to state 42


state 27

    (68) Array -> ARRAYNUM . NUM ID ;

    NUM             shift and go to state 43


state 28

    (69) Array -> ARRAYID . ID ID ;

    ID              shift and go to state 44


state 29

    (71) BlocoFOR -> FOR . ID ( Condicional ) Atribuicao { BlocosCodigo }

    ID              shift and go to state 45


state 30

    (3) BlocosCodigo -> BlocosCodigo Codigo .

    INT             reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    ID              reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    IF              reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    IFELSE          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    WHILE           reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    STRUCTARRAY     reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    STDOUT          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    COMMENT         reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    RETURN          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    DEFINE          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    CALL            reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    ARRAYNUM        reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    ARRAYID         reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    FOR             reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    $end            reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    }               reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)


state 31

    (5) Declaracao -> INT ID . ;
    (6) Declaracao -> INT ID . = Expressao ;
    (45) BlocoLerSTDIN -> ID . = STDIN ( ) ;

    ;               shift and go to state 46
    =               shift and go to state 47


state 32

    (7) Declaracao -> INT BlocoLerSTDIN .

    INT             reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    ID              reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    IF              reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    IFELSE          reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    WHILE           reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    STRUCTARRAY     reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    STDOUT          reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    COMMENT         reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    RETURN          reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    DEFINE          reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    CALL            reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    ARRAYNUM        reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    ARRAYID         reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    FOR             reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    $end            reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)
    }               reduce using rule 7 (Declaracao -> INT BlocoLerSTDIN .)


state 33

    (9) Atribuicao -> ID = . Expressao ;
    (10) Atribuicao -> ID = . Bloco_CALLFUNC
    (45) BlocoLerSTDIN -> ID = . STDIN ( ) ;
    (11) Expressao -> . Var
    (16) Expressao -> . Expressao Operador Var
    (17) Expressao -> . ( Expressao )
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    STDIN           shift and go to state 51
    (               shift and go to state 52
    CALL            shift and go to state 26
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Expressao                      shift and go to state 49
    Bloco_CALLFUNC                 shift and go to state 50
    Var                            shift and go to state 53

state 34

    (24) BlocoIF -> IF ( . ListaCondicionais ) { BlocosCodigo }
    (26) ListaCondicionais -> . Condicional
    (27) ListaCondicionais -> . ( ListaCondicionais )
    (28) ListaCondicionais -> . ! ( ListaCondicionais )
    (29) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 57
    !               shift and go to state 60
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    ListaCondicionais              shift and go to state 58
    Condicional                    shift and go to state 59
    Var                            shift and go to state 61

state 35

    (25) BlocoIF -> IFELSE ( . ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (26) ListaCondicionais -> . Condicional
    (27) ListaCondicionais -> . ( ListaCondicionais )
    (28) ListaCondicionais -> . ! ( ListaCondicionais )
    (29) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 57
    !               shift and go to state 60
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    ListaCondicionais              shift and go to state 62
    Condicional                    shift and go to state 59
    Var                            shift and go to state 61

state 36

    (43) BlocoWhileDo -> WHILE ( . ListaCondicionais ) DO { BlocosCodigo }
    (26) ListaCondicionais -> . Condicional
    (27) ListaCondicionais -> . ( ListaCondicionais )
    (28) ListaCondicionais -> . ! ( ListaCondicionais )
    (29) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 57
    !               shift and go to state 60
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    ListaCondicionais              shift and go to state 63
    Condicional                    shift and go to state 59
    Var                            shift and go to state 61

state 37

    (46) BlocoLerSTDIN -> STRUCTARRAY ID . ID = STDIN ( ) ;

    ID              shift and go to state 64


state 38

    (48) Bloco_EscreverSTDOUT -> STDOUT ( . Var ) ;
    (49) Bloco_EscreverSTDOUT -> STDOUT ( . PAL ) ;
    (50) Bloco_EscreverSTDOUT -> STDOUT ( . STRUCTARRAY ID ID ) ;
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    PAL             shift and go to state 66
    STRUCTARRAY     shift and go to state 67
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Var                            shift and go to state 65

state 39

    (54) Bloco_Return -> RETURN ID . ;

    ;               shift and go to state 68


state 40

    (55) Bloco_Return -> RETURN NUM . ;

    ;               shift and go to state 69


state 41

    (57) Bloco_DEFINEFUNC -> DEFINE FUNC . ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> DEFINE FUNC . ( ListaAtributos ) { BlocosCodigo }

    (               shift and go to state 70


state 42

    (63) Bloco_CALLFUNC -> CALL FUNC . ( ) ;
    (64) Bloco_CALLFUNC -> CALL FUNC . ( INPUTVar ) ;

    (               shift and go to state 71


state 43

    (68) Array -> ARRAYNUM NUM . ID ;

    ID              shift and go to state 72


state 44

    (69) Array -> ARRAYID ID . ID ;

    ID              shift and go to state 73


state 45

    (71) BlocoFOR -> FOR ID . ( Condicional ) Atribuicao { BlocosCodigo }

    (               shift and go to state 74


state 46

    (5) Declaracao -> INT ID ; .

    INT             reduce using rule 5 (Declaracao -> INT ID ; .)
    ID              reduce using rule 5 (Declaracao -> INT ID ; .)
    IF              reduce using rule 5 (Declaracao -> INT ID ; .)
    IFELSE          reduce using rule 5 (Declaracao -> INT ID ; .)
    WHILE           reduce using rule 5 (Declaracao -> INT ID ; .)
    STRUCTARRAY     reduce using rule 5 (Declaracao -> INT ID ; .)
    STDOUT          reduce using rule 5 (Declaracao -> INT ID ; .)
    COMMENT         reduce using rule 5 (Declaracao -> INT ID ; .)
    RETURN          reduce using rule 5 (Declaracao -> INT ID ; .)
    DEFINE          reduce using rule 5 (Declaracao -> INT ID ; .)
    CALL            reduce using rule 5 (Declaracao -> INT ID ; .)
    ARRAYNUM        reduce using rule 5 (Declaracao -> INT ID ; .)
    ARRAYID         reduce using rule 5 (Declaracao -> INT ID ; .)
    FOR             reduce using rule 5 (Declaracao -> INT ID ; .)
    $end            reduce using rule 5 (Declaracao -> INT ID ; .)
    }               reduce using rule 5 (Declaracao -> INT ID ; .)


state 47

    (6) Declaracao -> INT ID = . Expressao ;
    (45) BlocoLerSTDIN -> ID = . STDIN ( ) ;
    (11) Expressao -> . Var
    (16) Expressao -> . Expressao Operador Var
    (17) Expressao -> . ( Expressao )
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    STDIN           shift and go to state 51
    (               shift and go to state 52
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Expressao                      shift and go to state 75
    Var                            shift and go to state 53

state 48

    (13) Var -> ID .

    ;               reduce using rule 13 (Var -> ID .)
    +               reduce using rule 13 (Var -> ID .)
    -               reduce using rule 13 (Var -> ID .)
    *               reduce using rule 13 (Var -> ID .)
    /               reduce using rule 13 (Var -> ID .)
    %               reduce using rule 13 (Var -> ID .)
    >               reduce using rule 13 (Var -> ID .)
    BIGEQUAL        reduce using rule 13 (Var -> ID .)
    <               reduce using rule 13 (Var -> ID .)
    LESSEREQUAL     reduce using rule 13 (Var -> ID .)
    EQUALS          reduce using rule 13 (Var -> ID .)
    NOTEQUALS       reduce using rule 13 (Var -> ID .)
    )               reduce using rule 13 (Var -> ID .)
    AND             reduce using rule 13 (Var -> ID .)
    OR              reduce using rule 13 (Var -> ID .)
    ,               reduce using rule 13 (Var -> ID .)


state 49

    (9) Atribuicao -> ID = Expressao . ;
    (16) Expressao -> Expressao . Operador Var
    (18) Operador -> . +
    (19) Operador -> . -
    (20) Operador -> . *
    (21) Operador -> . /
    (22) Operador -> . %

    ;               shift and go to state 76
    +               shift and go to state 78
    -               shift and go to state 79
    *               shift and go to state 80
    /               shift and go to state 81
    %               shift and go to state 82

    Operador                       shift and go to state 77

state 50

    (10) Atribuicao -> ID = Bloco_CALLFUNC .

    INT             reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    ID              reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    IF              reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    IFELSE          reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    WHILE           reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    STRUCTARRAY     reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    STDOUT          reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    COMMENT         reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    RETURN          reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    DEFINE          reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    CALL            reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    ARRAYNUM        reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    ARRAYID         reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    FOR             reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    $end            reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    }               reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)
    {               reduce using rule 10 (Atribuicao -> ID = Bloco_CALLFUNC .)


state 51

    (45) BlocoLerSTDIN -> ID = STDIN . ( ) ;

    (               shift and go to state 83


state 52

    (17) Expressao -> ( . Expressao )
    (11) Expressao -> . Var
    (16) Expressao -> . Expressao Operador Var
    (17) Expressao -> . ( Expressao )
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 52
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Expressao                      shift and go to state 84
    Var                            shift and go to state 53

state 53

    (11) Expressao -> Var .

    ;               reduce using rule 11 (Expressao -> Var .)
    +               reduce using rule 11 (Expressao -> Var .)
    -               reduce using rule 11 (Expressao -> Var .)
    *               reduce using rule 11 (Expressao -> Var .)
    /               reduce using rule 11 (Expressao -> Var .)
    %               reduce using rule 11 (Expressao -> Var .)
    )               reduce using rule 11 (Expressao -> Var .)


state 54

    (12) Var -> NUM .

    ;               reduce using rule 12 (Var -> NUM .)
    +               reduce using rule 12 (Var -> NUM .)
    -               reduce using rule 12 (Var -> NUM .)
    *               reduce using rule 12 (Var -> NUM .)
    /               reduce using rule 12 (Var -> NUM .)
    %               reduce using rule 12 (Var -> NUM .)
    >               reduce using rule 12 (Var -> NUM .)
    BIGEQUAL        reduce using rule 12 (Var -> NUM .)
    <               reduce using rule 12 (Var -> NUM .)
    LESSEREQUAL     reduce using rule 12 (Var -> NUM .)
    EQUALS          reduce using rule 12 (Var -> NUM .)
    NOTEQUALS       reduce using rule 12 (Var -> NUM .)
    )               reduce using rule 12 (Var -> NUM .)
    AND             reduce using rule 12 (Var -> NUM .)
    OR              reduce using rule 12 (Var -> NUM .)
    ,               reduce using rule 12 (Var -> NUM .)


state 55

    (14) Var -> TRUE .

    ;               reduce using rule 14 (Var -> TRUE .)
    +               reduce using rule 14 (Var -> TRUE .)
    -               reduce using rule 14 (Var -> TRUE .)
    *               reduce using rule 14 (Var -> TRUE .)
    /               reduce using rule 14 (Var -> TRUE .)
    %               reduce using rule 14 (Var -> TRUE .)
    >               reduce using rule 14 (Var -> TRUE .)
    BIGEQUAL        reduce using rule 14 (Var -> TRUE .)
    <               reduce using rule 14 (Var -> TRUE .)
    LESSEREQUAL     reduce using rule 14 (Var -> TRUE .)
    EQUALS          reduce using rule 14 (Var -> TRUE .)
    NOTEQUALS       reduce using rule 14 (Var -> TRUE .)
    )               reduce using rule 14 (Var -> TRUE .)
    AND             reduce using rule 14 (Var -> TRUE .)
    OR              reduce using rule 14 (Var -> TRUE .)
    ,               reduce using rule 14 (Var -> TRUE .)


state 56

    (15) Var -> FALSE .

    ;               reduce using rule 15 (Var -> FALSE .)
    +               reduce using rule 15 (Var -> FALSE .)
    -               reduce using rule 15 (Var -> FALSE .)
    *               reduce using rule 15 (Var -> FALSE .)
    /               reduce using rule 15 (Var -> FALSE .)
    %               reduce using rule 15 (Var -> FALSE .)
    >               reduce using rule 15 (Var -> FALSE .)
    BIGEQUAL        reduce using rule 15 (Var -> FALSE .)
    <               reduce using rule 15 (Var -> FALSE .)
    LESSEREQUAL     reduce using rule 15 (Var -> FALSE .)
    EQUALS          reduce using rule 15 (Var -> FALSE .)
    NOTEQUALS       reduce using rule 15 (Var -> FALSE .)
    )               reduce using rule 15 (Var -> FALSE .)
    AND             reduce using rule 15 (Var -> FALSE .)
    OR              reduce using rule 15 (Var -> FALSE .)
    ,               reduce using rule 15 (Var -> FALSE .)


state 57

    (27) ListaCondicionais -> ( . ListaCondicionais )
    (34) Condicional -> ( . Condicional )
    (26) ListaCondicionais -> . Condicional
    (27) ListaCondicionais -> . ( ListaCondicionais )
    (28) ListaCondicionais -> . ! ( ListaCondicionais )
    (29) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 57
    !               shift and go to state 60
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    ListaCondicionais              shift and go to state 85
    Condicional                    shift and go to state 86
    Var                            shift and go to state 61

state 58

    (24) BlocoIF -> IF ( ListaCondicionais . ) { BlocosCodigo }
    (29) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (30) OperadorLogico -> . AND
    (31) OperadorLogico -> . OR

    )               shift and go to state 87
    AND             shift and go to state 89
    OR              shift and go to state 90

    OperadorLogico                 shift and go to state 88

state 59

    (26) ListaCondicionais -> Condicional .
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

    )               reduce using rule 26 (ListaCondicionais -> Condicional .)
    AND             reduce using rule 26 (ListaCondicionais -> Condicional .)
    OR              reduce using rule 26 (ListaCondicionais -> Condicional .)
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

    OperadorCondicional            shift and go to state 91

state 60

    (28) ListaCondicionais -> ! . ( ListaCondicionais )
    (33) Condicional -> ! . ( Condicional )

    (               shift and go to state 98


state 61

    (32) Condicional -> Var .

    >               reduce using rule 32 (Condicional -> Var .)
    BIGEQUAL        reduce using rule 32 (Condicional -> Var .)
    <               reduce using rule 32 (Condicional -> Var .)
    LESSEREQUAL     reduce using rule 32 (Condicional -> Var .)
    EQUALS          reduce using rule 32 (Condicional -> Var .)
    NOTEQUALS       reduce using rule 32 (Condicional -> Var .)
    )               reduce using rule 32 (Condicional -> Var .)
    AND             reduce using rule 32 (Condicional -> Var .)
    OR              reduce using rule 32 (Condicional -> Var .)


state 62

    (25) BlocoIF -> IFELSE ( ListaCondicionais . ) { BlocosCodigo } ELSE { BlocosCodigo }
    (29) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (30) OperadorLogico -> . AND
    (31) OperadorLogico -> . OR

    )               shift and go to state 99
    AND             shift and go to state 89
    OR              shift and go to state 90

    OperadorLogico                 shift and go to state 88

state 63

    (43) BlocoWhileDo -> WHILE ( ListaCondicionais . ) DO { BlocosCodigo }
    (29) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (30) OperadorLogico -> . AND
    (31) OperadorLogico -> . OR

    )               shift and go to state 100
    AND             shift and go to state 89
    OR              shift and go to state 90

    OperadorLogico                 shift and go to state 88

state 64

    (46) BlocoLerSTDIN -> STRUCTARRAY ID ID . = STDIN ( ) ;

    =               shift and go to state 101


state 65

    (48) Bloco_EscreverSTDOUT -> STDOUT ( Var . ) ;

    )               shift and go to state 102


state 66

    (49) Bloco_EscreverSTDOUT -> STDOUT ( PAL . ) ;

    )               shift and go to state 103


state 67

    (50) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY . ID ID ) ;

    ID              shift and go to state 104


state 68

    (54) Bloco_Return -> RETURN ID ; .

    INT             reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    ID              reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    IF              reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    IFELSE          reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    WHILE           reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    STRUCTARRAY     reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    STDOUT          reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    COMMENT         reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    RETURN          reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    DEFINE          reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    CALL            reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    ARRAYNUM        reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    ARRAYID         reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    FOR             reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    $end            reduce using rule 54 (Bloco_Return -> RETURN ID ; .)
    }               reduce using rule 54 (Bloco_Return -> RETURN ID ; .)


state 69

    (55) Bloco_Return -> RETURN NUM ; .

    INT             reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    ID              reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    IF              reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    IFELSE          reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    WHILE           reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    STRUCTARRAY     reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    STDOUT          reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    COMMENT         reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    RETURN          reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    DEFINE          reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    CALL            reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    ARRAYNUM        reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    ARRAYID         reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    FOR             reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    $end            reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)
    }               reduce using rule 55 (Bloco_Return -> RETURN NUM ; .)


state 70

    (57) Bloco_DEFINEFUNC -> DEFINE FUNC ( . ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( . ListaAtributos ) { BlocosCodigo }
    (59) ListaAtributos -> . Atributo
    (60) ListaAtributos -> . ListaAtributos , Atributo
    (61) Atributo -> . INT

    )               shift and go to state 105
    INT             shift and go to state 108

    ListaAtributos                 shift and go to state 106
    Atributo                       shift and go to state 107

state 71

    (63) Bloco_CALLFUNC -> CALL FUNC ( . ) ;
    (64) Bloco_CALLFUNC -> CALL FUNC ( . INPUTVar ) ;
    (65) INPUTVar -> . Var
    (66) INPUTVar -> . INPUTVar , Var
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    )               shift and go to state 109
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    INPUTVar                       shift and go to state 110
    Var                            shift and go to state 111

state 72

    (68) Array -> ARRAYNUM NUM ID . ;

    ;               shift and go to state 112


state 73

    (69) Array -> ARRAYID ID ID . ;

    ;               shift and go to state 113


state 74

    (71) BlocoFOR -> FOR ID ( . Condicional ) Atribuicao { BlocosCodigo }
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    !               shift and go to state 116
    (               shift and go to state 114
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Condicional                    shift and go to state 115
    Var                            shift and go to state 61

state 75

    (6) Declaracao -> INT ID = Expressao . ;
    (16) Expressao -> Expressao . Operador Var
    (18) Operador -> . +
    (19) Operador -> . -
    (20) Operador -> . *
    (21) Operador -> . /
    (22) Operador -> . %

    ;               shift and go to state 117
    +               shift and go to state 78
    -               shift and go to state 79
    *               shift and go to state 80
    /               shift and go to state 81
    %               shift and go to state 82

    Operador                       shift and go to state 77

state 76

    (9) Atribuicao -> ID = Expressao ; .

    INT             reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    ID              reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    IF              reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    IFELSE          reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    WHILE           reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    STRUCTARRAY     reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    STDOUT          reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    COMMENT         reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    RETURN          reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    DEFINE          reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    CALL            reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    ARRAYNUM        reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    ARRAYID         reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    FOR             reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    $end            reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    }               reduce using rule 9 (Atribuicao -> ID = Expressao ; .)
    {               reduce using rule 9 (Atribuicao -> ID = Expressao ; .)


state 77

    (16) Expressao -> Expressao Operador . Var
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Var                            shift and go to state 118

state 78

    (18) Operador -> + .

    NUM             reduce using rule 18 (Operador -> + .)
    ID              reduce using rule 18 (Operador -> + .)
    TRUE            reduce using rule 18 (Operador -> + .)
    FALSE           reduce using rule 18 (Operador -> + .)


state 79

    (19) Operador -> - .

    NUM             reduce using rule 19 (Operador -> - .)
    ID              reduce using rule 19 (Operador -> - .)
    TRUE            reduce using rule 19 (Operador -> - .)
    FALSE           reduce using rule 19 (Operador -> - .)


state 80

    (20) Operador -> * .

    NUM             reduce using rule 20 (Operador -> * .)
    ID              reduce using rule 20 (Operador -> * .)
    TRUE            reduce using rule 20 (Operador -> * .)
    FALSE           reduce using rule 20 (Operador -> * .)


state 81

    (21) Operador -> / .

    NUM             reduce using rule 21 (Operador -> / .)
    ID              reduce using rule 21 (Operador -> / .)
    TRUE            reduce using rule 21 (Operador -> / .)
    FALSE           reduce using rule 21 (Operador -> / .)


state 82

    (22) Operador -> % .

    NUM             reduce using rule 22 (Operador -> % .)
    ID              reduce using rule 22 (Operador -> % .)
    TRUE            reduce using rule 22 (Operador -> % .)
    FALSE           reduce using rule 22 (Operador -> % .)


state 83

    (45) BlocoLerSTDIN -> ID = STDIN ( . ) ;

    )               shift and go to state 119


state 84

    (17) Expressao -> ( Expressao . )
    (16) Expressao -> Expressao . Operador Var
    (18) Operador -> . +
    (19) Operador -> . -
    (20) Operador -> . *
    (21) Operador -> . /
    (22) Operador -> . %

    )               shift and go to state 120
    +               shift and go to state 78
    -               shift and go to state 79
    *               shift and go to state 80
    /               shift and go to state 81
    %               shift and go to state 82

    Operador                       shift and go to state 77

state 85

    (27) ListaCondicionais -> ( ListaCondicionais . )
    (29) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (30) OperadorLogico -> . AND
    (31) OperadorLogico -> . OR

    )               shift and go to state 121
    AND             shift and go to state 89
    OR              shift and go to state 90

    OperadorLogico                 shift and go to state 88

state 86

    (34) Condicional -> ( Condicional . )
    (26) ListaCondicionais -> Condicional .
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 122
    AND             reduce using rule 26 (ListaCondicionais -> Condicional .)
    OR              reduce using rule 26 (ListaCondicionais -> Condicional .)
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

  ! )               [ reduce using rule 26 (ListaCondicionais -> Condicional .) ]

    OperadorCondicional            shift and go to state 91

state 87

    (24) BlocoIF -> IF ( ListaCondicionais ) . { BlocosCodigo }

    {               shift and go to state 123


state 88

    (29) ListaCondicionais -> ListaCondicionais OperadorLogico . Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    !               shift and go to state 116
    (               shift and go to state 114
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Condicional                    shift and go to state 124
    Var                            shift and go to state 61

state 89

    (30) OperadorLogico -> AND .

    !               reduce using rule 30 (OperadorLogico -> AND .)
    (               reduce using rule 30 (OperadorLogico -> AND .)
    NUM             reduce using rule 30 (OperadorLogico -> AND .)
    ID              reduce using rule 30 (OperadorLogico -> AND .)
    TRUE            reduce using rule 30 (OperadorLogico -> AND .)
    FALSE           reduce using rule 30 (OperadorLogico -> AND .)


state 90

    (31) OperadorLogico -> OR .

    !               reduce using rule 31 (OperadorLogico -> OR .)
    (               reduce using rule 31 (OperadorLogico -> OR .)
    NUM             reduce using rule 31 (OperadorLogico -> OR .)
    ID              reduce using rule 31 (OperadorLogico -> OR .)
    TRUE            reduce using rule 31 (OperadorLogico -> OR .)
    FALSE           reduce using rule 31 (OperadorLogico -> OR .)


state 91

    (35) Condicional -> Condicional OperadorCondicional . Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    !               shift and go to state 116
    (               shift and go to state 114
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Condicional                    shift and go to state 125
    Var                            shift and go to state 61

state 92

    (36) OperadorCondicional -> > .

    !               reduce using rule 36 (OperadorCondicional -> > .)
    (               reduce using rule 36 (OperadorCondicional -> > .)
    NUM             reduce using rule 36 (OperadorCondicional -> > .)
    ID              reduce using rule 36 (OperadorCondicional -> > .)
    TRUE            reduce using rule 36 (OperadorCondicional -> > .)
    FALSE           reduce using rule 36 (OperadorCondicional -> > .)


state 93

    (37) OperadorCondicional -> BIGEQUAL .

    !               reduce using rule 37 (OperadorCondicional -> BIGEQUAL .)
    (               reduce using rule 37 (OperadorCondicional -> BIGEQUAL .)
    NUM             reduce using rule 37 (OperadorCondicional -> BIGEQUAL .)
    ID              reduce using rule 37 (OperadorCondicional -> BIGEQUAL .)
    TRUE            reduce using rule 37 (OperadorCondicional -> BIGEQUAL .)
    FALSE           reduce using rule 37 (OperadorCondicional -> BIGEQUAL .)


state 94

    (38) OperadorCondicional -> < .

    !               reduce using rule 38 (OperadorCondicional -> < .)
    (               reduce using rule 38 (OperadorCondicional -> < .)
    NUM             reduce using rule 38 (OperadorCondicional -> < .)
    ID              reduce using rule 38 (OperadorCondicional -> < .)
    TRUE            reduce using rule 38 (OperadorCondicional -> < .)
    FALSE           reduce using rule 38 (OperadorCondicional -> < .)


state 95

    (39) OperadorCondicional -> LESSEREQUAL .

    !               reduce using rule 39 (OperadorCondicional -> LESSEREQUAL .)
    (               reduce using rule 39 (OperadorCondicional -> LESSEREQUAL .)
    NUM             reduce using rule 39 (OperadorCondicional -> LESSEREQUAL .)
    ID              reduce using rule 39 (OperadorCondicional -> LESSEREQUAL .)
    TRUE            reduce using rule 39 (OperadorCondicional -> LESSEREQUAL .)
    FALSE           reduce using rule 39 (OperadorCondicional -> LESSEREQUAL .)


state 96

    (40) OperadorCondicional -> EQUALS .

    !               reduce using rule 40 (OperadorCondicional -> EQUALS .)
    (               reduce using rule 40 (OperadorCondicional -> EQUALS .)
    NUM             reduce using rule 40 (OperadorCondicional -> EQUALS .)
    ID              reduce using rule 40 (OperadorCondicional -> EQUALS .)
    TRUE            reduce using rule 40 (OperadorCondicional -> EQUALS .)
    FALSE           reduce using rule 40 (OperadorCondicional -> EQUALS .)


state 97

    (41) OperadorCondicional -> NOTEQUALS .

    !               reduce using rule 41 (OperadorCondicional -> NOTEQUALS .)
    (               reduce using rule 41 (OperadorCondicional -> NOTEQUALS .)
    NUM             reduce using rule 41 (OperadorCondicional -> NOTEQUALS .)
    ID              reduce using rule 41 (OperadorCondicional -> NOTEQUALS .)
    TRUE            reduce using rule 41 (OperadorCondicional -> NOTEQUALS .)
    FALSE           reduce using rule 41 (OperadorCondicional -> NOTEQUALS .)


state 98

    (28) ListaCondicionais -> ! ( . ListaCondicionais )
    (33) Condicional -> ! ( . Condicional )
    (26) ListaCondicionais -> . Condicional
    (27) ListaCondicionais -> . ( ListaCondicionais )
    (28) ListaCondicionais -> . ! ( ListaCondicionais )
    (29) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 57
    !               shift and go to state 60
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    ListaCondicionais              shift and go to state 126
    Condicional                    shift and go to state 127
    Var                            shift and go to state 61

state 99

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) . { BlocosCodigo } ELSE { BlocosCodigo }

    {               shift and go to state 128


state 100

    (43) BlocoWhileDo -> WHILE ( ListaCondicionais ) . DO { BlocosCodigo }

    DO              shift and go to state 129


state 101

    (46) BlocoLerSTDIN -> STRUCTARRAY ID ID = . STDIN ( ) ;

    STDIN           shift and go to state 130


state 102

    (48) Bloco_EscreverSTDOUT -> STDOUT ( Var ) . ;

    ;               shift and go to state 131


state 103

    (49) Bloco_EscreverSTDOUT -> STDOUT ( PAL ) . ;

    ;               shift and go to state 132


state 104

    (50) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID . ID ) ;

    ID              shift and go to state 133


state 105

    (57) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) . { BlocosCodigo }

    {               shift and go to state 134


state 106

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos . ) { BlocosCodigo }
    (60) ListaAtributos -> ListaAtributos . , Atributo

    )               shift and go to state 135
    ,               shift and go to state 136


state 107

    (59) ListaAtributos -> Atributo .

    )               reduce using rule 59 (ListaAtributos -> Atributo .)
    ,               reduce using rule 59 (ListaAtributos -> Atributo .)


state 108

    (61) Atributo -> INT .

    )               reduce using rule 61 (Atributo -> INT .)
    ,               reduce using rule 61 (Atributo -> INT .)


state 109

    (63) Bloco_CALLFUNC -> CALL FUNC ( ) . ;

    ;               shift and go to state 137


state 110

    (64) Bloco_CALLFUNC -> CALL FUNC ( INPUTVar . ) ;
    (66) INPUTVar -> INPUTVar . , Var

    )               shift and go to state 138
    ,               shift and go to state 139


state 111

    (65) INPUTVar -> Var .

    )               reduce using rule 65 (INPUTVar -> Var .)
    ,               reduce using rule 65 (INPUTVar -> Var .)


state 112

    (68) Array -> ARRAYNUM NUM ID ; .

    INT             reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    ID              reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    IF              reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    IFELSE          reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    WHILE           reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    STRUCTARRAY     reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    STDOUT          reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    COMMENT         reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    RETURN          reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    DEFINE          reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    CALL            reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    ARRAYNUM        reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    ARRAYID         reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    FOR             reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    $end            reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)
    }               reduce using rule 68 (Array -> ARRAYNUM NUM ID ; .)


state 113

    (69) Array -> ARRAYID ID ID ; .

    INT             reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    ID              reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    IF              reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    IFELSE          reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    WHILE           reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    STRUCTARRAY     reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    STDOUT          reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    COMMENT         reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    RETURN          reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    DEFINE          reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    CALL            reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    ARRAYNUM        reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    ARRAYID         reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    FOR             reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    $end            reduce using rule 69 (Array -> ARRAYID ID ID ; .)
    }               reduce using rule 69 (Array -> ARRAYID ID ID ; .)


state 114

    (34) Condicional -> ( . Condicional )
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    !               shift and go to state 116
    (               shift and go to state 114
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Condicional                    shift and go to state 140
    Var                            shift and go to state 61

state 115

    (71) BlocoFOR -> FOR ID ( Condicional . ) Atribuicao { BlocosCodigo }
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

    )               shift and go to state 141
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

    OperadorCondicional            shift and go to state 91

state 116

    (33) Condicional -> ! . ( Condicional )

    (               shift and go to state 142


state 117

    (6) Declaracao -> INT ID = Expressao ; .

    INT             reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    ID              reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    IF              reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    IFELSE          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    WHILE           reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    STRUCTARRAY     reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    STDOUT          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    COMMENT         reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    RETURN          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    DEFINE          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    CALL            reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    ARRAYNUM        reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    ARRAYID         reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    FOR             reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    $end            reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    }               reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)


state 118

    (16) Expressao -> Expressao Operador Var .

    ;               reduce using rule 16 (Expressao -> Expressao Operador Var .)
    +               reduce using rule 16 (Expressao -> Expressao Operador Var .)
    -               reduce using rule 16 (Expressao -> Expressao Operador Var .)
    *               reduce using rule 16 (Expressao -> Expressao Operador Var .)
    /               reduce using rule 16 (Expressao -> Expressao Operador Var .)
    %               reduce using rule 16 (Expressao -> Expressao Operador Var .)
    )               reduce using rule 16 (Expressao -> Expressao Operador Var .)


state 119

    (45) BlocoLerSTDIN -> ID = STDIN ( ) . ;

    ;               shift and go to state 143


state 120

    (17) Expressao -> ( Expressao ) .

    ;               reduce using rule 17 (Expressao -> ( Expressao ) .)
    +               reduce using rule 17 (Expressao -> ( Expressao ) .)
    -               reduce using rule 17 (Expressao -> ( Expressao ) .)
    *               reduce using rule 17 (Expressao -> ( Expressao ) .)
    /               reduce using rule 17 (Expressao -> ( Expressao ) .)
    %               reduce using rule 17 (Expressao -> ( Expressao ) .)
    )               reduce using rule 17 (Expressao -> ( Expressao ) .)


state 121

    (27) ListaCondicionais -> ( ListaCondicionais ) .

    )               reduce using rule 27 (ListaCondicionais -> ( ListaCondicionais ) .)
    AND             reduce using rule 27 (ListaCondicionais -> ( ListaCondicionais ) .)
    OR              reduce using rule 27 (ListaCondicionais -> ( ListaCondicionais ) .)


state 122

    (34) Condicional -> ( Condicional ) .

    >               reduce using rule 34 (Condicional -> ( Condicional ) .)
    BIGEQUAL        reduce using rule 34 (Condicional -> ( Condicional ) .)
    <               reduce using rule 34 (Condicional -> ( Condicional ) .)
    LESSEREQUAL     reduce using rule 34 (Condicional -> ( Condicional ) .)
    EQUALS          reduce using rule 34 (Condicional -> ( Condicional ) .)
    NOTEQUALS       reduce using rule 34 (Condicional -> ( Condicional ) .)
    )               reduce using rule 34 (Condicional -> ( Condicional ) .)
    AND             reduce using rule 34 (Condicional -> ( Condicional ) .)
    OR              reduce using rule 34 (Condicional -> ( Condicional ) .)


state 123

    (24) BlocoIF -> IF ( ListaCondicionais ) { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    BlocosCodigo                   shift and go to state 144
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 124

    (29) ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

    )               reduce using rule 29 (ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .)
    AND             reduce using rule 29 (ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .)
    OR              reduce using rule 29 (ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .)
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

    OperadorCondicional            shift and go to state 91

state 125

    (35) Condicional -> Condicional OperadorCondicional Condicional .
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for BIGEQUAL resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEREQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    )               reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .)
    AND             reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .)
    OR              reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .)
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

  ! >               [ reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! BIGEQUAL        [ reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! <               [ reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! LESSEREQUAL     [ reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! EQUALS          [ reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! NOTEQUALS       [ reduce using rule 35 (Condicional -> Condicional OperadorCondicional Condicional .) ]

    OperadorCondicional            shift and go to state 91

state 126

    (28) ListaCondicionais -> ! ( ListaCondicionais . )
    (29) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (30) OperadorLogico -> . AND
    (31) OperadorLogico -> . OR

    )               shift and go to state 145
    AND             shift and go to state 89
    OR              shift and go to state 90

    OperadorLogico                 shift and go to state 88

state 127

    (33) Condicional -> ! ( Condicional . )
    (26) ListaCondicionais -> Condicional .
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 146
    AND             reduce using rule 26 (ListaCondicionais -> Condicional .)
    OR              reduce using rule 26 (ListaCondicionais -> Condicional .)
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

  ! )               [ reduce using rule 26 (ListaCondicionais -> Condicional .) ]

    OperadorCondicional            shift and go to state 91

state 128

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { . BlocosCodigo } ELSE { BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    BlocosCodigo                   shift and go to state 147
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 129

    (43) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO . { BlocosCodigo }

    {               shift and go to state 148


state 130

    (46) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN . ( ) ;

    (               shift and go to state 149


state 131

    (48) Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .

    INT             reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    ID              reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    IF              reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    IFELSE          reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    WHILE           reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    STRUCTARRAY     reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    STDOUT          reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    COMMENT         reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    RETURN          reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    DEFINE          reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    CALL            reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    ARRAYNUM        reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    ARRAYID         reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    FOR             reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    $end            reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    }               reduce using rule 48 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)


state 132

    (49) Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .

    INT             reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    ID              reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    IF              reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    IFELSE          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    WHILE           reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    STRUCTARRAY     reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    STDOUT          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    COMMENT         reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    RETURN          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    DEFINE          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    CALL            reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    ARRAYNUM        reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    ARRAYID         reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    FOR             reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    $end            reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    }               reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)


state 133

    (50) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID . ) ;

    )               shift and go to state 150


state 134

    (57) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    BlocosCodigo                   shift and go to state 151
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 135

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) . { BlocosCodigo }

    {               shift and go to state 152


state 136

    (60) ListaAtributos -> ListaAtributos , . Atributo
    (61) Atributo -> . INT

    INT             shift and go to state 108

    Atributo                       shift and go to state 153

state 137

    (63) Bloco_CALLFUNC -> CALL FUNC ( ) ; .

    INT             reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    ID              reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    IF              reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    IFELSE          reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    WHILE           reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    STRUCTARRAY     reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    STDOUT          reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    COMMENT         reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    RETURN          reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    DEFINE          reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    CALL            reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    ARRAYNUM        reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    ARRAYID         reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    FOR             reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    $end            reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    }               reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    {               reduce using rule 63 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)


state 138

    (64) Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) . ;

    ;               shift and go to state 154


state 139

    (66) INPUTVar -> INPUTVar , . Var
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Var                            shift and go to state 155

state 140

    (34) Condicional -> ( Condicional . )
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

    )               shift and go to state 122
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

    OperadorCondicional            shift and go to state 91

state 141

    (71) BlocoFOR -> FOR ID ( Condicional ) . Atribuicao { BlocosCodigo }
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC

    ID              shift and go to state 156

    Atribuicao                     shift and go to state 157

state 142

    (33) Condicional -> ! ( . Condicional )
    (32) Condicional -> . Var
    (33) Condicional -> . ! ( Condicional )
    (34) Condicional -> . ( Condicional )
    (35) Condicional -> . Condicional OperadorCondicional Condicional
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    !               shift and go to state 116
    (               shift and go to state 114
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Condicional                    shift and go to state 158
    Var                            shift and go to state 61

state 143

    (45) BlocoLerSTDIN -> ID = STDIN ( ) ; .

    INT             reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    ID              reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    IF              reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    IFELSE          reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    WHILE           reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    STRUCTARRAY     reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    STDOUT          reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    COMMENT         reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    RETURN          reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    DEFINE          reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    CALL            reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    ARRAYNUM        reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    ARRAYID         reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    FOR             reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    $end            reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    }               reduce using rule 45 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)


state 144

    (24) BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 159
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 145

    (28) ListaCondicionais -> ! ( ListaCondicionais ) .

    )               reduce using rule 28 (ListaCondicionais -> ! ( ListaCondicionais ) .)
    AND             reduce using rule 28 (ListaCondicionais -> ! ( ListaCondicionais ) .)
    OR              reduce using rule 28 (ListaCondicionais -> ! ( ListaCondicionais ) .)


state 146

    (33) Condicional -> ! ( Condicional ) .

    >               reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    BIGEQUAL        reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    <               reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    LESSEREQUAL     reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    EQUALS          reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    NOTEQUALS       reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    )               reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    AND             reduce using rule 33 (Condicional -> ! ( Condicional ) .)
    OR              reduce using rule 33 (Condicional -> ! ( Condicional ) .)


state 147

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo . } ELSE { BlocosCodigo }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 160
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 148

    (43) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    BlocosCodigo                   shift and go to state 161
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 149

    (46) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( . ) ;

    )               shift and go to state 162


state 150

    (50) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) . ;

    ;               shift and go to state 163


state 151

    (57) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 164
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 152

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    BlocosCodigo                   shift and go to state 165
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 153

    (60) ListaAtributos -> ListaAtributos , Atributo .

    )               reduce using rule 60 (ListaAtributos -> ListaAtributos , Atributo .)
    ,               reduce using rule 60 (ListaAtributos -> ListaAtributos , Atributo .)


state 154

    (64) Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .

    INT             reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    ID              reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    IF              reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    IFELSE          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    WHILE           reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    STRUCTARRAY     reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    STDOUT          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    COMMENT         reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    RETURN          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    DEFINE          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    CALL            reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    ARRAYNUM        reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    ARRAYID         reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    FOR             reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    $end            reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    }               reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    {               reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)


state 155

    (66) INPUTVar -> INPUTVar , Var .

    )               reduce using rule 66 (INPUTVar -> INPUTVar , Var .)
    ,               reduce using rule 66 (INPUTVar -> INPUTVar , Var .)


state 156

    (9) Atribuicao -> ID . = Expressao ;
    (10) Atribuicao -> ID . = Bloco_CALLFUNC

    =               shift and go to state 166


state 157

    (71) BlocoFOR -> FOR ID ( Condicional ) Atribuicao . { BlocosCodigo }

    {               shift and go to state 167


state 158

    (33) Condicional -> ! ( Condicional . )
    (35) Condicional -> Condicional . OperadorCondicional Condicional
    (36) OperadorCondicional -> . >
    (37) OperadorCondicional -> . BIGEQUAL
    (38) OperadorCondicional -> . <
    (39) OperadorCondicional -> . LESSEREQUAL
    (40) OperadorCondicional -> . EQUALS
    (41) OperadorCondicional -> . NOTEQUALS

    )               shift and go to state 146
    >               shift and go to state 92
    BIGEQUAL        shift and go to state 93
    <               shift and go to state 94
    LESSEREQUAL     shift and go to state 95
    EQUALS          shift and go to state 96
    NOTEQUALS       shift and go to state 97

    OperadorCondicional            shift and go to state 91

state 159

    (24) BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .

    INT             reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    ID              reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    IF              reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    IFELSE          reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    WHILE           reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    STDOUT          reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    COMMENT         reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    RETURN          reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    DEFINE          reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    CALL            reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    ARRAYID         reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    FOR             reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    $end            reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    }               reduce using rule 24 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)


state 160

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } . ELSE { BlocosCodigo }

    ELSE            shift and go to state 168


state 161

    (43) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 169
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 162

    (46) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) . ;

    ;               shift and go to state 170


state 163

    (50) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .

    INT             reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    ID              reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    IF              reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    IFELSE          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    WHILE           reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    STRUCTARRAY     reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    STDOUT          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    COMMENT         reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    RETURN          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    DEFINE          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    CALL            reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    ARRAYNUM        reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    ARRAYID         reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    FOR             reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    $end            reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    }               reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)


state 164

    (57) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .

    INT             reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    ID              reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    IF              reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    IFELSE          reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    WHILE           reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    STDOUT          reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    COMMENT         reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    RETURN          reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    DEFINE          reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    CALL            reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    ARRAYID         reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    FOR             reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    $end            reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    }               reduce using rule 57 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)


state 165

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 171
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 166

    (9) Atribuicao -> ID = . Expressao ;
    (10) Atribuicao -> ID = . Bloco_CALLFUNC
    (11) Expressao -> . Var
    (16) Expressao -> . Expressao Operador Var
    (17) Expressao -> . ( Expressao )
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (12) Var -> . NUM
    (13) Var -> . ID
    (14) Var -> . TRUE
    (15) Var -> . FALSE

    (               shift and go to state 52
    CALL            shift and go to state 26
    NUM             shift and go to state 54
    ID              shift and go to state 48
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    Expressao                      shift and go to state 49
    Bloco_CALLFUNC                 shift and go to state 50
    Var                            shift and go to state 53

state 167

    (71) BlocoFOR -> FOR ID ( Condicional ) Atribuicao { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Atribuicao                     shift and go to state 5
    BlocosCodigo                   shift and go to state 172
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 168

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE . { BlocosCodigo }

    {               shift and go to state 173


state 169

    (43) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .

    INT             reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    ID              reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    IF              reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    IFELSE          reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    WHILE           reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    STDOUT          reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    COMMENT         reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    RETURN          reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    DEFINE          reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    CALL            reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    ARRAYID         reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    FOR             reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    $end            reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    }               reduce using rule 43 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)


state 170

    (46) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .

    INT             reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    ID              reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    IF              reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    IFELSE          reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    WHILE           reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    STRUCTARRAY     reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    STDOUT          reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    COMMENT         reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    RETURN          reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    DEFINE          reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    CALL            reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    ARRAYNUM        reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    ARRAYID         reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    FOR             reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    $end            reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    }               reduce using rule 46 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)


state 171

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .

    INT             reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    ID              reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    IF              reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    IFELSE          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    WHILE           reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    STDOUT          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    COMMENT         reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    RETURN          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    DEFINE          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    CALL            reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    ARRAYID         reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    FOR             reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    $end            reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    }               reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)


state 172

    (71) BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 174
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Atribuicao                     shift and go to state 5
    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 173

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    BlocosCodigo                   shift and go to state 175
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 174

    (71) BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .

    INT             reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    ID              reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    IF              reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    IFELSE          reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    WHILE           reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    STDOUT          reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    COMMENT         reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    RETURN          reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    DEFINE          reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    CALL            reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    ARRAYID         reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    FOR             reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    $end            reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    }               reduce using rule 71 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)


state 175

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (8) Codigo -> . Atribuicao
    (23) Codigo -> . BlocoIF
    (42) Codigo -> . BlocoWhileDo
    (44) Codigo -> . BlocoLerSTDIN
    (47) Codigo -> . Bloco_EscreverSTDOUT
    (51) Codigo -> . Bloco_Comentario
    (53) Codigo -> . Bloco_Return
    (56) Codigo -> . Bloco_DEFINEFUNC
    (62) Codigo -> . Bloco_CALLFUNC
    (67) Codigo -> . Array
    (70) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INT BlocoLerSTDIN
    (9) Atribuicao -> . ID = Expressao ;
    (10) Atribuicao -> . ID = Bloco_CALLFUNC
    (24) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (25) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (43) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (45) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (46) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (48) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (52) Bloco_Comentario -> . COMMENT
    (54) Bloco_Return -> . RETURN ID ;
    (55) Bloco_Return -> . RETURN NUM ;
    (57) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (63) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (64) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (68) Array -> . ARRAYNUM NUM ID ;
    (69) Array -> . ARRAYID ID ID ;
    (71) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 176
    INT             shift and go to state 16
    ID              shift and go to state 17
    IF              shift and go to state 18
    IFELSE          shift and go to state 19
    WHILE           shift and go to state 20
    STRUCTARRAY     shift and go to state 21
    STDOUT          shift and go to state 22
    COMMENT         shift and go to state 23
    RETURN          shift and go to state 24
    DEFINE          shift and go to state 25
    CALL            shift and go to state 26
    ARRAYNUM        shift and go to state 27
    ARRAYID         shift and go to state 28
    FOR             shift and go to state 29

    Codigo                         shift and go to state 30
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 176

    (25) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .

    INT             reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    ID              reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    IF              reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    IFELSE          reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    WHILE           reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    STDOUT          reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    COMMENT         reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    RETURN          reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    DEFINE          reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    CALL            reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    ARRAYID         reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    FOR             reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    $end            reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    }               reduce using rule 25 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 86 resolved as shift
WARNING: shift/reduce conflict for > in state 125 resolved as shift
WARNING: shift/reduce conflict for BIGEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for < in state 125 resolved as shift
WARNING: shift/reduce conflict for LESSEREQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 125 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 125 resolved as shift
WARNING: shift/reduce conflict for ) in state 127 resolved as shift
