Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> BlocosCodigo
Rule 2     BlocosCodigo -> Codigo
Rule 3     BlocosCodigo -> BlocosCodigo Codigo
Rule 4     Codigo -> Declaracao
Rule 5     Declaracao -> INT ID ;
Rule 6     Declaracao -> INT ID = Expressao ;
Rule 7     Declaracao -> INTR ID = Expressao ;
Rule 8     Declaracao -> INT BlocoLerSTDIN
Rule 9     Codigo -> Atribuicao
Rule 10    Atribuicao -> ID = Expressao ;
Rule 11    Atribuicao -> ID = Bloco_CALLFUNC
Rule 12    Expressao -> Var
Rule 13    Var -> NUM
Rule 14    Var -> ID
Rule 15    Var -> TRUE
Rule 16    Var -> FALSE
Rule 17    Expressao -> Expressao Operador Var
Rule 18    Expressao -> ( Expressao )
Rule 19    Operador -> +
Rule 20    Operador -> -
Rule 21    Operador -> *
Rule 22    Operador -> /
Rule 23    Operador -> %
Rule 24    Codigo -> BlocoIF
Rule 25    BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo }
Rule 26    BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
Rule 27    ListaCondicionais -> Condicional
Rule 28    ListaCondicionais -> ( ListaCondicionais )
Rule 29    ListaCondicionais -> ! ( ListaCondicionais )
Rule 30    ListaCondicionais -> ListaCondicionais OperadorLogico Condicional
Rule 31    OperadorLogico -> AND
Rule 32    OperadorLogico -> OR
Rule 33    Condicional -> Var
Rule 34    Condicional -> ! ( Condicional )
Rule 35    Condicional -> ( Condicional )
Rule 36    Condicional -> Condicional OperadorCondicional Condicional
Rule 37    OperadorCondicional -> >
Rule 38    OperadorCondicional -> BIGEQUAL
Rule 39    OperadorCondicional -> <
Rule 40    OperadorCondicional -> LESSEREQUAL
Rule 41    OperadorCondicional -> EQUALS
Rule 42    OperadorCondicional -> NOTEQUALS
Rule 43    Codigo -> BlocoWhileDo
Rule 44    BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo }
Rule 45    Codigo -> BlocoLerSTDIN
Rule 46    BlocoLerSTDIN -> ID = STDIN ( ) ;
Rule 47    BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ;
Rule 48    Codigo -> Bloco_EscreverSTDOUT
Rule 49    Bloco_EscreverSTDOUT -> STDOUT ( Var ) ;
Rule 50    Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ;
Rule 51    Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ;
Rule 52    Codigo -> Bloco_Comentario
Rule 53    Bloco_Comentario -> COMMENT
Rule 54    Codigo -> Bloco_Return
Rule 55    Bloco_Return -> RETURN ID ;
Rule 56    Bloco_Return -> RETURN NUM ;
Rule 57    Codigo -> Bloco_DEFINEFUNC
Rule 58    Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo }
Rule 59    Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
Rule 60    ListaAtributos -> Atributo
Rule 61    ListaAtributos -> ListaAtributos , Atributo
Rule 62    Atributo -> INT
Rule 63    Codigo -> Bloco_CALLFUNC
Rule 64    Bloco_CALLFUNC -> CALL FUNC ( ) ;
Rule 65    Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ;
Rule 66    Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ;
Rule 67    INPUTVar -> Var
Rule 68    INPUTVar -> INPUTVar , Var
Rule 69    Codigo -> Array
Rule 70    Array -> ARRAYNUM NUM ID ;
Rule 71    Array -> ARRAYID ID ID ;
Rule 72    Codigo -> BlocoFOR
Rule 73    BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

Terminals, with rules where they appear

!                    : 29 34
%                    : 23
(                    : 18 25 26 28 29 34 35 44 46 47 49 50 51 58 59 64 65 66 73
)                    : 18 25 26 28 29 34 35 44 46 47 49 50 51 58 59 64 65 66 73
*                    : 21
+                    : 19
,                    : 61 68
-                    : 20
/                    : 22
;                    : 5 6 7 10 46 47 49 50 51 55 56 64 65 65 66 70 71
<                    : 39
=                    : 6 7 10 11 46 47 65
>                    : 37
AND                  : 31
ARRAYID              : 71
ARRAYNUM             : 70
BIGEQUAL             : 38
CALL                 : 64 65 66
COMMENT              : 53
DEFINE               : 58 59
DO                   : 44
ELSE                 : 26
EQUALS               : 41
FALSE                : 16
FOR                  : 73
FUNC                 : 58 59 64 65 66
ID                   : 5 6 7 10 11 14 46 47 47 51 51 55 65 70 71 71 73
IF                   : 25
IFELSE               : 26
INT                  : 5 6 8 62
INTR                 : 7
LESSEREQUAL          : 40
NOTEQUALS            : 42
NUM                  : 13 56 70
OR                   : 32
PAL                  : 50
RETURN               : 55 56
STDIN                : 46 47
STDOUT               : 49 50 51
STRUCTARRAY          : 47 51
TRUE                 : 15
WHILE                : 44
error                : 
{                    : 25 26 26 44 58 59 73
}                    : 25 26 26 44 58 59 73

Nonterminals, with rules where they appear

Array                : 69
Atribuicao           : 9 73
Atributo             : 60 61
BlocoFOR             : 72
BlocoIF              : 24
BlocoLerSTDIN        : 8 45
BlocoWhileDo         : 43
Bloco_CALLFUNC       : 11 63
Bloco_Comentario     : 52
Bloco_DEFINEFUNC     : 57
Bloco_EscreverSTDOUT : 48
Bloco_Return         : 54
BlocosCodigo         : 1 3 25 26 26 44 58 59 73
Codigo               : 2 3
Condicional          : 27 30 34 35 36 36 73
Declaracao           : 4
Expressao            : 6 7 10 17 18
INPUTVar             : 66 68
ListaAtributos       : 59 61
ListaCondicionais    : 25 26 28 29 30 44
Operador             : 17
OperadorCondicional  : 36
OperadorLogico       : 30
Programa             : 0
Var                  : 12 17 33 49 67 68

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . BlocosCodigo
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Programa                       shift and go to state 1
    BlocosCodigo                   shift and go to state 2
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> BlocosCodigo .
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    $end            reduce using rule 1 (Programa -> BlocosCodigo .)
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 3

    (2) BlocosCodigo -> Codigo .

    INT             reduce using rule 2 (BlocosCodigo -> Codigo .)
    INTR            reduce using rule 2 (BlocosCodigo -> Codigo .)
    ID              reduce using rule 2 (BlocosCodigo -> Codigo .)
    IF              reduce using rule 2 (BlocosCodigo -> Codigo .)
    IFELSE          reduce using rule 2 (BlocosCodigo -> Codigo .)
    WHILE           reduce using rule 2 (BlocosCodigo -> Codigo .)
    STRUCTARRAY     reduce using rule 2 (BlocosCodigo -> Codigo .)
    STDOUT          reduce using rule 2 (BlocosCodigo -> Codigo .)
    COMMENT         reduce using rule 2 (BlocosCodigo -> Codigo .)
    RETURN          reduce using rule 2 (BlocosCodigo -> Codigo .)
    DEFINE          reduce using rule 2 (BlocosCodigo -> Codigo .)
    CALL            reduce using rule 2 (BlocosCodigo -> Codigo .)
    ARRAYNUM        reduce using rule 2 (BlocosCodigo -> Codigo .)
    ARRAYID         reduce using rule 2 (BlocosCodigo -> Codigo .)
    FOR             reduce using rule 2 (BlocosCodigo -> Codigo .)
    $end            reduce using rule 2 (BlocosCodigo -> Codigo .)
    }               reduce using rule 2 (BlocosCodigo -> Codigo .)


state 4

    (4) Codigo -> Declaracao .

    INT             reduce using rule 4 (Codigo -> Declaracao .)
    INTR            reduce using rule 4 (Codigo -> Declaracao .)
    ID              reduce using rule 4 (Codigo -> Declaracao .)
    IF              reduce using rule 4 (Codigo -> Declaracao .)
    IFELSE          reduce using rule 4 (Codigo -> Declaracao .)
    WHILE           reduce using rule 4 (Codigo -> Declaracao .)
    STRUCTARRAY     reduce using rule 4 (Codigo -> Declaracao .)
    STDOUT          reduce using rule 4 (Codigo -> Declaracao .)
    COMMENT         reduce using rule 4 (Codigo -> Declaracao .)
    RETURN          reduce using rule 4 (Codigo -> Declaracao .)
    DEFINE          reduce using rule 4 (Codigo -> Declaracao .)
    CALL            reduce using rule 4 (Codigo -> Declaracao .)
    ARRAYNUM        reduce using rule 4 (Codigo -> Declaracao .)
    ARRAYID         reduce using rule 4 (Codigo -> Declaracao .)
    FOR             reduce using rule 4 (Codigo -> Declaracao .)
    $end            reduce using rule 4 (Codigo -> Declaracao .)
    }               reduce using rule 4 (Codigo -> Declaracao .)


state 5

    (9) Codigo -> Atribuicao .

    INT             reduce using rule 9 (Codigo -> Atribuicao .)
    INTR            reduce using rule 9 (Codigo -> Atribuicao .)
    ID              reduce using rule 9 (Codigo -> Atribuicao .)
    IF              reduce using rule 9 (Codigo -> Atribuicao .)
    IFELSE          reduce using rule 9 (Codigo -> Atribuicao .)
    WHILE           reduce using rule 9 (Codigo -> Atribuicao .)
    STRUCTARRAY     reduce using rule 9 (Codigo -> Atribuicao .)
    STDOUT          reduce using rule 9 (Codigo -> Atribuicao .)
    COMMENT         reduce using rule 9 (Codigo -> Atribuicao .)
    RETURN          reduce using rule 9 (Codigo -> Atribuicao .)
    DEFINE          reduce using rule 9 (Codigo -> Atribuicao .)
    CALL            reduce using rule 9 (Codigo -> Atribuicao .)
    ARRAYNUM        reduce using rule 9 (Codigo -> Atribuicao .)
    ARRAYID         reduce using rule 9 (Codigo -> Atribuicao .)
    FOR             reduce using rule 9 (Codigo -> Atribuicao .)
    $end            reduce using rule 9 (Codigo -> Atribuicao .)
    }               reduce using rule 9 (Codigo -> Atribuicao .)


state 6

    (24) Codigo -> BlocoIF .

    INT             reduce using rule 24 (Codigo -> BlocoIF .)
    INTR            reduce using rule 24 (Codigo -> BlocoIF .)
    ID              reduce using rule 24 (Codigo -> BlocoIF .)
    IF              reduce using rule 24 (Codigo -> BlocoIF .)
    IFELSE          reduce using rule 24 (Codigo -> BlocoIF .)
    WHILE           reduce using rule 24 (Codigo -> BlocoIF .)
    STRUCTARRAY     reduce using rule 24 (Codigo -> BlocoIF .)
    STDOUT          reduce using rule 24 (Codigo -> BlocoIF .)
    COMMENT         reduce using rule 24 (Codigo -> BlocoIF .)
    RETURN          reduce using rule 24 (Codigo -> BlocoIF .)
    DEFINE          reduce using rule 24 (Codigo -> BlocoIF .)
    CALL            reduce using rule 24 (Codigo -> BlocoIF .)
    ARRAYNUM        reduce using rule 24 (Codigo -> BlocoIF .)
    ARRAYID         reduce using rule 24 (Codigo -> BlocoIF .)
    FOR             reduce using rule 24 (Codigo -> BlocoIF .)
    $end            reduce using rule 24 (Codigo -> BlocoIF .)
    }               reduce using rule 24 (Codigo -> BlocoIF .)


state 7

    (43) Codigo -> BlocoWhileDo .

    INT             reduce using rule 43 (Codigo -> BlocoWhileDo .)
    INTR            reduce using rule 43 (Codigo -> BlocoWhileDo .)
    ID              reduce using rule 43 (Codigo -> BlocoWhileDo .)
    IF              reduce using rule 43 (Codigo -> BlocoWhileDo .)
    IFELSE          reduce using rule 43 (Codigo -> BlocoWhileDo .)
    WHILE           reduce using rule 43 (Codigo -> BlocoWhileDo .)
    STRUCTARRAY     reduce using rule 43 (Codigo -> BlocoWhileDo .)
    STDOUT          reduce using rule 43 (Codigo -> BlocoWhileDo .)
    COMMENT         reduce using rule 43 (Codigo -> BlocoWhileDo .)
    RETURN          reduce using rule 43 (Codigo -> BlocoWhileDo .)
    DEFINE          reduce using rule 43 (Codigo -> BlocoWhileDo .)
    CALL            reduce using rule 43 (Codigo -> BlocoWhileDo .)
    ARRAYNUM        reduce using rule 43 (Codigo -> BlocoWhileDo .)
    ARRAYID         reduce using rule 43 (Codigo -> BlocoWhileDo .)
    FOR             reduce using rule 43 (Codigo -> BlocoWhileDo .)
    $end            reduce using rule 43 (Codigo -> BlocoWhileDo .)
    }               reduce using rule 43 (Codigo -> BlocoWhileDo .)


state 8

    (45) Codigo -> BlocoLerSTDIN .

    INT             reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    INTR            reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    ID              reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    IF              reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    IFELSE          reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    WHILE           reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    STRUCTARRAY     reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    STDOUT          reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    COMMENT         reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    RETURN          reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    DEFINE          reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    CALL            reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    ARRAYNUM        reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    ARRAYID         reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    FOR             reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    $end            reduce using rule 45 (Codigo -> BlocoLerSTDIN .)
    }               reduce using rule 45 (Codigo -> BlocoLerSTDIN .)


state 9

    (48) Codigo -> Bloco_EscreverSTDOUT .

    INT             reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    INTR            reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    ID              reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    IF              reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    IFELSE          reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    WHILE           reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    STRUCTARRAY     reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    STDOUT          reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    COMMENT         reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    RETURN          reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    DEFINE          reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    CALL            reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    ARRAYNUM        reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    ARRAYID         reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    FOR             reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    $end            reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)
    }               reduce using rule 48 (Codigo -> Bloco_EscreverSTDOUT .)


state 10

    (52) Codigo -> Bloco_Comentario .

    INT             reduce using rule 52 (Codigo -> Bloco_Comentario .)
    INTR            reduce using rule 52 (Codigo -> Bloco_Comentario .)
    ID              reduce using rule 52 (Codigo -> Bloco_Comentario .)
    IF              reduce using rule 52 (Codigo -> Bloco_Comentario .)
    IFELSE          reduce using rule 52 (Codigo -> Bloco_Comentario .)
    WHILE           reduce using rule 52 (Codigo -> Bloco_Comentario .)
    STRUCTARRAY     reduce using rule 52 (Codigo -> Bloco_Comentario .)
    STDOUT          reduce using rule 52 (Codigo -> Bloco_Comentario .)
    COMMENT         reduce using rule 52 (Codigo -> Bloco_Comentario .)
    RETURN          reduce using rule 52 (Codigo -> Bloco_Comentario .)
    DEFINE          reduce using rule 52 (Codigo -> Bloco_Comentario .)
    CALL            reduce using rule 52 (Codigo -> Bloco_Comentario .)
    ARRAYNUM        reduce using rule 52 (Codigo -> Bloco_Comentario .)
    ARRAYID         reduce using rule 52 (Codigo -> Bloco_Comentario .)
    FOR             reduce using rule 52 (Codigo -> Bloco_Comentario .)
    $end            reduce using rule 52 (Codigo -> Bloco_Comentario .)
    }               reduce using rule 52 (Codigo -> Bloco_Comentario .)


state 11

    (54) Codigo -> Bloco_Return .

    INT             reduce using rule 54 (Codigo -> Bloco_Return .)
    INTR            reduce using rule 54 (Codigo -> Bloco_Return .)
    ID              reduce using rule 54 (Codigo -> Bloco_Return .)
    IF              reduce using rule 54 (Codigo -> Bloco_Return .)
    IFELSE          reduce using rule 54 (Codigo -> Bloco_Return .)
    WHILE           reduce using rule 54 (Codigo -> Bloco_Return .)
    STRUCTARRAY     reduce using rule 54 (Codigo -> Bloco_Return .)
    STDOUT          reduce using rule 54 (Codigo -> Bloco_Return .)
    COMMENT         reduce using rule 54 (Codigo -> Bloco_Return .)
    RETURN          reduce using rule 54 (Codigo -> Bloco_Return .)
    DEFINE          reduce using rule 54 (Codigo -> Bloco_Return .)
    CALL            reduce using rule 54 (Codigo -> Bloco_Return .)
    ARRAYNUM        reduce using rule 54 (Codigo -> Bloco_Return .)
    ARRAYID         reduce using rule 54 (Codigo -> Bloco_Return .)
    FOR             reduce using rule 54 (Codigo -> Bloco_Return .)
    $end            reduce using rule 54 (Codigo -> Bloco_Return .)
    }               reduce using rule 54 (Codigo -> Bloco_Return .)


state 12

    (57) Codigo -> Bloco_DEFINEFUNC .

    INT             reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    INTR            reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    ID              reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    IF              reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    IFELSE          reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    WHILE           reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    STRUCTARRAY     reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    STDOUT          reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    COMMENT         reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    RETURN          reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    DEFINE          reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    CALL            reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    ARRAYNUM        reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    ARRAYID         reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    FOR             reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    $end            reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)
    }               reduce using rule 57 (Codigo -> Bloco_DEFINEFUNC .)


state 13

    (63) Codigo -> Bloco_CALLFUNC .

    INT             reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    INTR            reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    ID              reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    IF              reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    IFELSE          reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    WHILE           reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    STRUCTARRAY     reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    STDOUT          reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    COMMENT         reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    RETURN          reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    DEFINE          reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    CALL            reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    ARRAYNUM        reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    ARRAYID         reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    FOR             reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    $end            reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)
    }               reduce using rule 63 (Codigo -> Bloco_CALLFUNC .)


state 14

    (69) Codigo -> Array .

    INT             reduce using rule 69 (Codigo -> Array .)
    INTR            reduce using rule 69 (Codigo -> Array .)
    ID              reduce using rule 69 (Codigo -> Array .)
    IF              reduce using rule 69 (Codigo -> Array .)
    IFELSE          reduce using rule 69 (Codigo -> Array .)
    WHILE           reduce using rule 69 (Codigo -> Array .)
    STRUCTARRAY     reduce using rule 69 (Codigo -> Array .)
    STDOUT          reduce using rule 69 (Codigo -> Array .)
    COMMENT         reduce using rule 69 (Codigo -> Array .)
    RETURN          reduce using rule 69 (Codigo -> Array .)
    DEFINE          reduce using rule 69 (Codigo -> Array .)
    CALL            reduce using rule 69 (Codigo -> Array .)
    ARRAYNUM        reduce using rule 69 (Codigo -> Array .)
    ARRAYID         reduce using rule 69 (Codigo -> Array .)
    FOR             reduce using rule 69 (Codigo -> Array .)
    $end            reduce using rule 69 (Codigo -> Array .)
    }               reduce using rule 69 (Codigo -> Array .)


state 15

    (72) Codigo -> BlocoFOR .

    INT             reduce using rule 72 (Codigo -> BlocoFOR .)
    INTR            reduce using rule 72 (Codigo -> BlocoFOR .)
    ID              reduce using rule 72 (Codigo -> BlocoFOR .)
    IF              reduce using rule 72 (Codigo -> BlocoFOR .)
    IFELSE          reduce using rule 72 (Codigo -> BlocoFOR .)
    WHILE           reduce using rule 72 (Codigo -> BlocoFOR .)
    STRUCTARRAY     reduce using rule 72 (Codigo -> BlocoFOR .)
    STDOUT          reduce using rule 72 (Codigo -> BlocoFOR .)
    COMMENT         reduce using rule 72 (Codigo -> BlocoFOR .)
    RETURN          reduce using rule 72 (Codigo -> BlocoFOR .)
    DEFINE          reduce using rule 72 (Codigo -> BlocoFOR .)
    CALL            reduce using rule 72 (Codigo -> BlocoFOR .)
    ARRAYNUM        reduce using rule 72 (Codigo -> BlocoFOR .)
    ARRAYID         reduce using rule 72 (Codigo -> BlocoFOR .)
    FOR             reduce using rule 72 (Codigo -> BlocoFOR .)
    $end            reduce using rule 72 (Codigo -> BlocoFOR .)
    }               reduce using rule 72 (Codigo -> BlocoFOR .)


state 16

    (5) Declaracao -> INT . ID ;
    (6) Declaracao -> INT . ID = Expressao ;
    (8) Declaracao -> INT . BlocoLerSTDIN
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;

    ID              shift and go to state 32
    STRUCTARRAY     shift and go to state 22

    BlocoLerSTDIN                  shift and go to state 33

state 17

    (10) Atribuicao -> ID . = Expressao ;
    (11) Atribuicao -> ID . = Bloco_CALLFUNC
    (46) BlocoLerSTDIN -> ID . = STDIN ( ) ;
    (65) Bloco_CALLFUNC -> ID . = CALL FUNC ( ; ) ;

    =               shift and go to state 34


state 18

    (7) Declaracao -> INTR . ID = Expressao ;

    ID              shift and go to state 35


state 19

    (25) BlocoIF -> IF . ( ListaCondicionais ) { BlocosCodigo }

    (               shift and go to state 36


state 20

    (26) BlocoIF -> IFELSE . ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }

    (               shift and go to state 37


state 21

    (44) BlocoWhileDo -> WHILE . ( ListaCondicionais ) DO { BlocosCodigo }

    (               shift and go to state 38


state 22

    (47) BlocoLerSTDIN -> STRUCTARRAY . ID ID = STDIN ( ) ;

    ID              shift and go to state 39


state 23

    (49) Bloco_EscreverSTDOUT -> STDOUT . ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> STDOUT . ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> STDOUT . ( STRUCTARRAY ID ID ) ;

    (               shift and go to state 40


state 24

    (53) Bloco_Comentario -> COMMENT .

    INT             reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    INTR            reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    ID              reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    IF              reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    IFELSE          reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    WHILE           reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    STRUCTARRAY     reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    STDOUT          reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    COMMENT         reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    RETURN          reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    DEFINE          reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    CALL            reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    ARRAYNUM        reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    ARRAYID         reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    FOR             reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    $end            reduce using rule 53 (Bloco_Comentario -> COMMENT .)
    }               reduce using rule 53 (Bloco_Comentario -> COMMENT .)


state 25

    (55) Bloco_Return -> RETURN . ID ;
    (56) Bloco_Return -> RETURN . NUM ;

    ID              shift and go to state 41
    NUM             shift and go to state 42


state 26

    (58) Bloco_DEFINEFUNC -> DEFINE . FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> DEFINE . FUNC ( ListaAtributos ) { BlocosCodigo }

    FUNC            shift and go to state 43


state 27

    (64) Bloco_CALLFUNC -> CALL . FUNC ( ) ;
    (66) Bloco_CALLFUNC -> CALL . FUNC ( INPUTVar ) ;

    FUNC            shift and go to state 44


state 28

    (70) Array -> ARRAYNUM . NUM ID ;

    NUM             shift and go to state 45


state 29

    (71) Array -> ARRAYID . ID ID ;

    ID              shift and go to state 46


state 30

    (73) BlocoFOR -> FOR . ID ( Condicional ) Atribuicao { BlocosCodigo }

    ID              shift and go to state 47


state 31

    (3) BlocosCodigo -> BlocosCodigo Codigo .

    INT             reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    INTR            reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    ID              reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    IF              reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    IFELSE          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    WHILE           reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    STRUCTARRAY     reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    STDOUT          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    COMMENT         reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    RETURN          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    DEFINE          reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    CALL            reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    ARRAYNUM        reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    ARRAYID         reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    FOR             reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    $end            reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)
    }               reduce using rule 3 (BlocosCodigo -> BlocosCodigo Codigo .)


state 32

    (5) Declaracao -> INT ID . ;
    (6) Declaracao -> INT ID . = Expressao ;
    (46) BlocoLerSTDIN -> ID . = STDIN ( ) ;

    ;               shift and go to state 48
    =               shift and go to state 49


state 33

    (8) Declaracao -> INT BlocoLerSTDIN .

    INT             reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    INTR            reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    ID              reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    IF              reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    IFELSE          reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    WHILE           reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    STRUCTARRAY     reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    STDOUT          reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    COMMENT         reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    RETURN          reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    DEFINE          reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    CALL            reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    ARRAYNUM        reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    ARRAYID         reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    FOR             reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    $end            reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)
    }               reduce using rule 8 (Declaracao -> INT BlocoLerSTDIN .)


state 34

    (10) Atribuicao -> ID = . Expressao ;
    (11) Atribuicao -> ID = . Bloco_CALLFUNC
    (46) BlocoLerSTDIN -> ID = . STDIN ( ) ;
    (65) Bloco_CALLFUNC -> ID = . CALL FUNC ( ; ) ;
    (12) Expressao -> . Var
    (17) Expressao -> . Expressao Operador Var
    (18) Expressao -> . ( Expressao )
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    STDIN           shift and go to state 53
    CALL            shift and go to state 55
    (               shift and go to state 54
    ID              shift and go to state 50
    NUM             shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Expressao                      shift and go to state 51
    Bloco_CALLFUNC                 shift and go to state 52
    Var                            shift and go to state 56

state 35

    (7) Declaracao -> INTR ID . = Expressao ;

    =               shift and go to state 60


state 36

    (25) BlocoIF -> IF ( . ListaCondicionais ) { BlocosCodigo }
    (27) ListaCondicionais -> . Condicional
    (28) ListaCondicionais -> . ( ListaCondicionais )
    (29) ListaCondicionais -> . ! ( ListaCondicionais )
    (30) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 61
    !               shift and go to state 64
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    ListaCondicionais              shift and go to state 62
    Condicional                    shift and go to state 63
    Var                            shift and go to state 65

state 37

    (26) BlocoIF -> IFELSE ( . ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (27) ListaCondicionais -> . Condicional
    (28) ListaCondicionais -> . ( ListaCondicionais )
    (29) ListaCondicionais -> . ! ( ListaCondicionais )
    (30) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 61
    !               shift and go to state 64
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    ListaCondicionais              shift and go to state 67
    Condicional                    shift and go to state 63
    Var                            shift and go to state 65

state 38

    (44) BlocoWhileDo -> WHILE ( . ListaCondicionais ) DO { BlocosCodigo }
    (27) ListaCondicionais -> . Condicional
    (28) ListaCondicionais -> . ( ListaCondicionais )
    (29) ListaCondicionais -> . ! ( ListaCondicionais )
    (30) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 61
    !               shift and go to state 64
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    ListaCondicionais              shift and go to state 68
    Condicional                    shift and go to state 63
    Var                            shift and go to state 65

state 39

    (47) BlocoLerSTDIN -> STRUCTARRAY ID . ID = STDIN ( ) ;

    ID              shift and go to state 69


state 40

    (49) Bloco_EscreverSTDOUT -> STDOUT ( . Var ) ;
    (50) Bloco_EscreverSTDOUT -> STDOUT ( . PAL ) ;
    (51) Bloco_EscreverSTDOUT -> STDOUT ( . STRUCTARRAY ID ID ) ;
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    PAL             shift and go to state 71
    STRUCTARRAY     shift and go to state 72
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Var                            shift and go to state 70

state 41

    (55) Bloco_Return -> RETURN ID . ;

    ;               shift and go to state 73


state 42

    (56) Bloco_Return -> RETURN NUM . ;

    ;               shift and go to state 74


state 43

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC . ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> DEFINE FUNC . ( ListaAtributos ) { BlocosCodigo }

    (               shift and go to state 75


state 44

    (64) Bloco_CALLFUNC -> CALL FUNC . ( ) ;
    (66) Bloco_CALLFUNC -> CALL FUNC . ( INPUTVar ) ;

    (               shift and go to state 76


state 45

    (70) Array -> ARRAYNUM NUM . ID ;

    ID              shift and go to state 77


state 46

    (71) Array -> ARRAYID ID . ID ;

    ID              shift and go to state 78


state 47

    (73) BlocoFOR -> FOR ID . ( Condicional ) Atribuicao { BlocosCodigo }

    (               shift and go to state 79


state 48

    (5) Declaracao -> INT ID ; .

    INT             reduce using rule 5 (Declaracao -> INT ID ; .)
    INTR            reduce using rule 5 (Declaracao -> INT ID ; .)
    ID              reduce using rule 5 (Declaracao -> INT ID ; .)
    IF              reduce using rule 5 (Declaracao -> INT ID ; .)
    IFELSE          reduce using rule 5 (Declaracao -> INT ID ; .)
    WHILE           reduce using rule 5 (Declaracao -> INT ID ; .)
    STRUCTARRAY     reduce using rule 5 (Declaracao -> INT ID ; .)
    STDOUT          reduce using rule 5 (Declaracao -> INT ID ; .)
    COMMENT         reduce using rule 5 (Declaracao -> INT ID ; .)
    RETURN          reduce using rule 5 (Declaracao -> INT ID ; .)
    DEFINE          reduce using rule 5 (Declaracao -> INT ID ; .)
    CALL            reduce using rule 5 (Declaracao -> INT ID ; .)
    ARRAYNUM        reduce using rule 5 (Declaracao -> INT ID ; .)
    ARRAYID         reduce using rule 5 (Declaracao -> INT ID ; .)
    FOR             reduce using rule 5 (Declaracao -> INT ID ; .)
    $end            reduce using rule 5 (Declaracao -> INT ID ; .)
    }               reduce using rule 5 (Declaracao -> INT ID ; .)


state 49

    (6) Declaracao -> INT ID = . Expressao ;
    (46) BlocoLerSTDIN -> ID = . STDIN ( ) ;
    (12) Expressao -> . Var
    (17) Expressao -> . Expressao Operador Var
    (18) Expressao -> . ( Expressao )
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    STDIN           shift and go to state 53
    (               shift and go to state 54
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Expressao                      shift and go to state 80
    Var                            shift and go to state 56

state 50

    (65) Bloco_CALLFUNC -> ID . = CALL FUNC ( ; ) ;
    (14) Var -> ID .

    =               shift and go to state 81
    ;               reduce using rule 14 (Var -> ID .)
    +               reduce using rule 14 (Var -> ID .)
    -               reduce using rule 14 (Var -> ID .)
    *               reduce using rule 14 (Var -> ID .)
    /               reduce using rule 14 (Var -> ID .)
    %               reduce using rule 14 (Var -> ID .)


state 51

    (10) Atribuicao -> ID = Expressao . ;
    (17) Expressao -> Expressao . Operador Var
    (19) Operador -> . +
    (20) Operador -> . -
    (21) Operador -> . *
    (22) Operador -> . /
    (23) Operador -> . %

    ;               shift and go to state 82
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    %               shift and go to state 88

    Operador                       shift and go to state 83

state 52

    (11) Atribuicao -> ID = Bloco_CALLFUNC .

    INT             reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    INTR            reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    ID              reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    IF              reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    IFELSE          reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    WHILE           reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    STRUCTARRAY     reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    STDOUT          reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    COMMENT         reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    RETURN          reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    DEFINE          reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    CALL            reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    ARRAYNUM        reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    ARRAYID         reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    FOR             reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    $end            reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    }               reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)
    {               reduce using rule 11 (Atribuicao -> ID = Bloco_CALLFUNC .)


state 53

    (46) BlocoLerSTDIN -> ID = STDIN . ( ) ;

    (               shift and go to state 89


state 54

    (18) Expressao -> ( . Expressao )
    (12) Expressao -> . Var
    (17) Expressao -> . Expressao Operador Var
    (18) Expressao -> . ( Expressao )
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 54
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Expressao                      shift and go to state 90
    Var                            shift and go to state 56

state 55

    (65) Bloco_CALLFUNC -> ID = CALL . FUNC ( ; ) ;
    (64) Bloco_CALLFUNC -> CALL . FUNC ( ) ;
    (66) Bloco_CALLFUNC -> CALL . FUNC ( INPUTVar ) ;

    FUNC            shift and go to state 91


state 56

    (12) Expressao -> Var .

    ;               reduce using rule 12 (Expressao -> Var .)
    +               reduce using rule 12 (Expressao -> Var .)
    -               reduce using rule 12 (Expressao -> Var .)
    *               reduce using rule 12 (Expressao -> Var .)
    /               reduce using rule 12 (Expressao -> Var .)
    %               reduce using rule 12 (Expressao -> Var .)
    )               reduce using rule 12 (Expressao -> Var .)


state 57

    (13) Var -> NUM .

    ;               reduce using rule 13 (Var -> NUM .)
    +               reduce using rule 13 (Var -> NUM .)
    -               reduce using rule 13 (Var -> NUM .)
    *               reduce using rule 13 (Var -> NUM .)
    /               reduce using rule 13 (Var -> NUM .)
    %               reduce using rule 13 (Var -> NUM .)
    >               reduce using rule 13 (Var -> NUM .)
    BIGEQUAL        reduce using rule 13 (Var -> NUM .)
    <               reduce using rule 13 (Var -> NUM .)
    LESSEREQUAL     reduce using rule 13 (Var -> NUM .)
    EQUALS          reduce using rule 13 (Var -> NUM .)
    NOTEQUALS       reduce using rule 13 (Var -> NUM .)
    )               reduce using rule 13 (Var -> NUM .)
    AND             reduce using rule 13 (Var -> NUM .)
    OR              reduce using rule 13 (Var -> NUM .)
    ,               reduce using rule 13 (Var -> NUM .)


state 58

    (15) Var -> TRUE .

    ;               reduce using rule 15 (Var -> TRUE .)
    +               reduce using rule 15 (Var -> TRUE .)
    -               reduce using rule 15 (Var -> TRUE .)
    *               reduce using rule 15 (Var -> TRUE .)
    /               reduce using rule 15 (Var -> TRUE .)
    %               reduce using rule 15 (Var -> TRUE .)
    >               reduce using rule 15 (Var -> TRUE .)
    BIGEQUAL        reduce using rule 15 (Var -> TRUE .)
    <               reduce using rule 15 (Var -> TRUE .)
    LESSEREQUAL     reduce using rule 15 (Var -> TRUE .)
    EQUALS          reduce using rule 15 (Var -> TRUE .)
    NOTEQUALS       reduce using rule 15 (Var -> TRUE .)
    )               reduce using rule 15 (Var -> TRUE .)
    AND             reduce using rule 15 (Var -> TRUE .)
    OR              reduce using rule 15 (Var -> TRUE .)
    ,               reduce using rule 15 (Var -> TRUE .)


state 59

    (16) Var -> FALSE .

    ;               reduce using rule 16 (Var -> FALSE .)
    +               reduce using rule 16 (Var -> FALSE .)
    -               reduce using rule 16 (Var -> FALSE .)
    *               reduce using rule 16 (Var -> FALSE .)
    /               reduce using rule 16 (Var -> FALSE .)
    %               reduce using rule 16 (Var -> FALSE .)
    >               reduce using rule 16 (Var -> FALSE .)
    BIGEQUAL        reduce using rule 16 (Var -> FALSE .)
    <               reduce using rule 16 (Var -> FALSE .)
    LESSEREQUAL     reduce using rule 16 (Var -> FALSE .)
    EQUALS          reduce using rule 16 (Var -> FALSE .)
    NOTEQUALS       reduce using rule 16 (Var -> FALSE .)
    )               reduce using rule 16 (Var -> FALSE .)
    AND             reduce using rule 16 (Var -> FALSE .)
    OR              reduce using rule 16 (Var -> FALSE .)
    ,               reduce using rule 16 (Var -> FALSE .)


state 60

    (7) Declaracao -> INTR ID = . Expressao ;
    (12) Expressao -> . Var
    (17) Expressao -> . Expressao Operador Var
    (18) Expressao -> . ( Expressao )
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 54
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Expressao                      shift and go to state 92
    Var                            shift and go to state 56

state 61

    (28) ListaCondicionais -> ( . ListaCondicionais )
    (35) Condicional -> ( . Condicional )
    (27) ListaCondicionais -> . Condicional
    (28) ListaCondicionais -> . ( ListaCondicionais )
    (29) ListaCondicionais -> . ! ( ListaCondicionais )
    (30) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 61
    !               shift and go to state 64
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    ListaCondicionais              shift and go to state 93
    Condicional                    shift and go to state 94
    Var                            shift and go to state 65

state 62

    (25) BlocoIF -> IF ( ListaCondicionais . ) { BlocosCodigo }
    (30) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (31) OperadorLogico -> . AND
    (32) OperadorLogico -> . OR

    )               shift and go to state 95
    AND             shift and go to state 97
    OR              shift and go to state 98

    OperadorLogico                 shift and go to state 96

state 63

    (27) ListaCondicionais -> Condicional .
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

    )               reduce using rule 27 (ListaCondicionais -> Condicional .)
    AND             reduce using rule 27 (ListaCondicionais -> Condicional .)
    OR              reduce using rule 27 (ListaCondicionais -> Condicional .)
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

    OperadorCondicional            shift and go to state 99

state 64

    (29) ListaCondicionais -> ! . ( ListaCondicionais )
    (34) Condicional -> ! . ( Condicional )

    (               shift and go to state 106


state 65

    (33) Condicional -> Var .

    >               reduce using rule 33 (Condicional -> Var .)
    BIGEQUAL        reduce using rule 33 (Condicional -> Var .)
    <               reduce using rule 33 (Condicional -> Var .)
    LESSEREQUAL     reduce using rule 33 (Condicional -> Var .)
    EQUALS          reduce using rule 33 (Condicional -> Var .)
    NOTEQUALS       reduce using rule 33 (Condicional -> Var .)
    )               reduce using rule 33 (Condicional -> Var .)
    AND             reduce using rule 33 (Condicional -> Var .)
    OR              reduce using rule 33 (Condicional -> Var .)


state 66

    (14) Var -> ID .

    >               reduce using rule 14 (Var -> ID .)
    BIGEQUAL        reduce using rule 14 (Var -> ID .)
    <               reduce using rule 14 (Var -> ID .)
    LESSEREQUAL     reduce using rule 14 (Var -> ID .)
    EQUALS          reduce using rule 14 (Var -> ID .)
    NOTEQUALS       reduce using rule 14 (Var -> ID .)
    )               reduce using rule 14 (Var -> ID .)
    AND             reduce using rule 14 (Var -> ID .)
    OR              reduce using rule 14 (Var -> ID .)
    ;               reduce using rule 14 (Var -> ID .)
    +               reduce using rule 14 (Var -> ID .)
    -               reduce using rule 14 (Var -> ID .)
    *               reduce using rule 14 (Var -> ID .)
    /               reduce using rule 14 (Var -> ID .)
    %               reduce using rule 14 (Var -> ID .)
    ,               reduce using rule 14 (Var -> ID .)


state 67

    (26) BlocoIF -> IFELSE ( ListaCondicionais . ) { BlocosCodigo } ELSE { BlocosCodigo }
    (30) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (31) OperadorLogico -> . AND
    (32) OperadorLogico -> . OR

    )               shift and go to state 107
    AND             shift and go to state 97
    OR              shift and go to state 98

    OperadorLogico                 shift and go to state 96

state 68

    (44) BlocoWhileDo -> WHILE ( ListaCondicionais . ) DO { BlocosCodigo }
    (30) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (31) OperadorLogico -> . AND
    (32) OperadorLogico -> . OR

    )               shift and go to state 108
    AND             shift and go to state 97
    OR              shift and go to state 98

    OperadorLogico                 shift and go to state 96

state 69

    (47) BlocoLerSTDIN -> STRUCTARRAY ID ID . = STDIN ( ) ;

    =               shift and go to state 109


state 70

    (49) Bloco_EscreverSTDOUT -> STDOUT ( Var . ) ;

    )               shift and go to state 110


state 71

    (50) Bloco_EscreverSTDOUT -> STDOUT ( PAL . ) ;

    )               shift and go to state 111


state 72

    (51) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY . ID ID ) ;

    ID              shift and go to state 112


state 73

    (55) Bloco_Return -> RETURN ID ; .

    INT             reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    INTR            reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    ID              reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    IF              reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    IFELSE          reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    WHILE           reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    STRUCTARRAY     reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    STDOUT          reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    COMMENT         reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    RETURN          reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    DEFINE          reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    CALL            reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    ARRAYNUM        reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    ARRAYID         reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    FOR             reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    $end            reduce using rule 55 (Bloco_Return -> RETURN ID ; .)
    }               reduce using rule 55 (Bloco_Return -> RETURN ID ; .)


state 74

    (56) Bloco_Return -> RETURN NUM ; .

    INT             reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    INTR            reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    ID              reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    IF              reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    IFELSE          reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    WHILE           reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    STRUCTARRAY     reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    STDOUT          reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    COMMENT         reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    RETURN          reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    DEFINE          reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    CALL            reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    ARRAYNUM        reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    ARRAYID         reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    FOR             reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    $end            reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)
    }               reduce using rule 56 (Bloco_Return -> RETURN NUM ; .)


state 75

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( . ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> DEFINE FUNC ( . ListaAtributos ) { BlocosCodigo }
    (60) ListaAtributos -> . Atributo
    (61) ListaAtributos -> . ListaAtributos , Atributo
    (62) Atributo -> . INT

    )               shift and go to state 113
    INT             shift and go to state 116

    ListaAtributos                 shift and go to state 114
    Atributo                       shift and go to state 115

state 76

    (64) Bloco_CALLFUNC -> CALL FUNC ( . ) ;
    (66) Bloco_CALLFUNC -> CALL FUNC ( . INPUTVar ) ;
    (67) INPUTVar -> . Var
    (68) INPUTVar -> . INPUTVar , Var
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    )               shift and go to state 117
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    INPUTVar                       shift and go to state 118
    Var                            shift and go to state 119

state 77

    (70) Array -> ARRAYNUM NUM ID . ;

    ;               shift and go to state 120


state 78

    (71) Array -> ARRAYID ID ID . ;

    ;               shift and go to state 121


state 79

    (73) BlocoFOR -> FOR ID ( . Condicional ) Atribuicao { BlocosCodigo }
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    !               shift and go to state 124
    (               shift and go to state 122
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Condicional                    shift and go to state 123
    Var                            shift and go to state 65

state 80

    (6) Declaracao -> INT ID = Expressao . ;
    (17) Expressao -> Expressao . Operador Var
    (19) Operador -> . +
    (20) Operador -> . -
    (21) Operador -> . *
    (22) Operador -> . /
    (23) Operador -> . %

    ;               shift and go to state 125
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    %               shift and go to state 88

    Operador                       shift and go to state 83

state 81

    (65) Bloco_CALLFUNC -> ID = . CALL FUNC ( ; ) ;

    CALL            shift and go to state 126


state 82

    (10) Atribuicao -> ID = Expressao ; .

    INT             reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    INTR            reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    ID              reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    IF              reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    IFELSE          reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    WHILE           reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    STRUCTARRAY     reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    STDOUT          reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    COMMENT         reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    RETURN          reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    DEFINE          reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    CALL            reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    ARRAYNUM        reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    ARRAYID         reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    FOR             reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    $end            reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    }               reduce using rule 10 (Atribuicao -> ID = Expressao ; .)
    {               reduce using rule 10 (Atribuicao -> ID = Expressao ; .)


state 83

    (17) Expressao -> Expressao Operador . Var
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Var                            shift and go to state 127

state 84

    (19) Operador -> + .

    NUM             reduce using rule 19 (Operador -> + .)
    ID              reduce using rule 19 (Operador -> + .)
    TRUE            reduce using rule 19 (Operador -> + .)
    FALSE           reduce using rule 19 (Operador -> + .)


state 85

    (20) Operador -> - .

    NUM             reduce using rule 20 (Operador -> - .)
    ID              reduce using rule 20 (Operador -> - .)
    TRUE            reduce using rule 20 (Operador -> - .)
    FALSE           reduce using rule 20 (Operador -> - .)


state 86

    (21) Operador -> * .

    NUM             reduce using rule 21 (Operador -> * .)
    ID              reduce using rule 21 (Operador -> * .)
    TRUE            reduce using rule 21 (Operador -> * .)
    FALSE           reduce using rule 21 (Operador -> * .)


state 87

    (22) Operador -> / .

    NUM             reduce using rule 22 (Operador -> / .)
    ID              reduce using rule 22 (Operador -> / .)
    TRUE            reduce using rule 22 (Operador -> / .)
    FALSE           reduce using rule 22 (Operador -> / .)


state 88

    (23) Operador -> % .

    NUM             reduce using rule 23 (Operador -> % .)
    ID              reduce using rule 23 (Operador -> % .)
    TRUE            reduce using rule 23 (Operador -> % .)
    FALSE           reduce using rule 23 (Operador -> % .)


state 89

    (46) BlocoLerSTDIN -> ID = STDIN ( . ) ;

    )               shift and go to state 128


state 90

    (18) Expressao -> ( Expressao . )
    (17) Expressao -> Expressao . Operador Var
    (19) Operador -> . +
    (20) Operador -> . -
    (21) Operador -> . *
    (22) Operador -> . /
    (23) Operador -> . %

    )               shift and go to state 129
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    %               shift and go to state 88

    Operador                       shift and go to state 83

state 91

    (65) Bloco_CALLFUNC -> ID = CALL FUNC . ( ; ) ;
    (64) Bloco_CALLFUNC -> CALL FUNC . ( ) ;
    (66) Bloco_CALLFUNC -> CALL FUNC . ( INPUTVar ) ;

    (               shift and go to state 130


state 92

    (7) Declaracao -> INTR ID = Expressao . ;
    (17) Expressao -> Expressao . Operador Var
    (19) Operador -> . +
    (20) Operador -> . -
    (21) Operador -> . *
    (22) Operador -> . /
    (23) Operador -> . %

    ;               shift and go to state 131
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    %               shift and go to state 88

    Operador                       shift and go to state 83

state 93

    (28) ListaCondicionais -> ( ListaCondicionais . )
    (30) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (31) OperadorLogico -> . AND
    (32) OperadorLogico -> . OR

    )               shift and go to state 132
    AND             shift and go to state 97
    OR              shift and go to state 98

    OperadorLogico                 shift and go to state 96

state 94

    (35) Condicional -> ( Condicional . )
    (27) ListaCondicionais -> Condicional .
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 133
    AND             reduce using rule 27 (ListaCondicionais -> Condicional .)
    OR              reduce using rule 27 (ListaCondicionais -> Condicional .)
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

  ! )               [ reduce using rule 27 (ListaCondicionais -> Condicional .) ]

    OperadorCondicional            shift and go to state 99

state 95

    (25) BlocoIF -> IF ( ListaCondicionais ) . { BlocosCodigo }

    {               shift and go to state 134


state 96

    (30) ListaCondicionais -> ListaCondicionais OperadorLogico . Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    !               shift and go to state 124
    (               shift and go to state 122
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Condicional                    shift and go to state 135
    Var                            shift and go to state 65

state 97

    (31) OperadorLogico -> AND .

    !               reduce using rule 31 (OperadorLogico -> AND .)
    (               reduce using rule 31 (OperadorLogico -> AND .)
    NUM             reduce using rule 31 (OperadorLogico -> AND .)
    ID              reduce using rule 31 (OperadorLogico -> AND .)
    TRUE            reduce using rule 31 (OperadorLogico -> AND .)
    FALSE           reduce using rule 31 (OperadorLogico -> AND .)


state 98

    (32) OperadorLogico -> OR .

    !               reduce using rule 32 (OperadorLogico -> OR .)
    (               reduce using rule 32 (OperadorLogico -> OR .)
    NUM             reduce using rule 32 (OperadorLogico -> OR .)
    ID              reduce using rule 32 (OperadorLogico -> OR .)
    TRUE            reduce using rule 32 (OperadorLogico -> OR .)
    FALSE           reduce using rule 32 (OperadorLogico -> OR .)


state 99

    (36) Condicional -> Condicional OperadorCondicional . Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    !               shift and go to state 124
    (               shift and go to state 122
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Condicional                    shift and go to state 136
    Var                            shift and go to state 65

state 100

    (37) OperadorCondicional -> > .

    !               reduce using rule 37 (OperadorCondicional -> > .)
    (               reduce using rule 37 (OperadorCondicional -> > .)
    NUM             reduce using rule 37 (OperadorCondicional -> > .)
    ID              reduce using rule 37 (OperadorCondicional -> > .)
    TRUE            reduce using rule 37 (OperadorCondicional -> > .)
    FALSE           reduce using rule 37 (OperadorCondicional -> > .)


state 101

    (38) OperadorCondicional -> BIGEQUAL .

    !               reduce using rule 38 (OperadorCondicional -> BIGEQUAL .)
    (               reduce using rule 38 (OperadorCondicional -> BIGEQUAL .)
    NUM             reduce using rule 38 (OperadorCondicional -> BIGEQUAL .)
    ID              reduce using rule 38 (OperadorCondicional -> BIGEQUAL .)
    TRUE            reduce using rule 38 (OperadorCondicional -> BIGEQUAL .)
    FALSE           reduce using rule 38 (OperadorCondicional -> BIGEQUAL .)


state 102

    (39) OperadorCondicional -> < .

    !               reduce using rule 39 (OperadorCondicional -> < .)
    (               reduce using rule 39 (OperadorCondicional -> < .)
    NUM             reduce using rule 39 (OperadorCondicional -> < .)
    ID              reduce using rule 39 (OperadorCondicional -> < .)
    TRUE            reduce using rule 39 (OperadorCondicional -> < .)
    FALSE           reduce using rule 39 (OperadorCondicional -> < .)


state 103

    (40) OperadorCondicional -> LESSEREQUAL .

    !               reduce using rule 40 (OperadorCondicional -> LESSEREQUAL .)
    (               reduce using rule 40 (OperadorCondicional -> LESSEREQUAL .)
    NUM             reduce using rule 40 (OperadorCondicional -> LESSEREQUAL .)
    ID              reduce using rule 40 (OperadorCondicional -> LESSEREQUAL .)
    TRUE            reduce using rule 40 (OperadorCondicional -> LESSEREQUAL .)
    FALSE           reduce using rule 40 (OperadorCondicional -> LESSEREQUAL .)


state 104

    (41) OperadorCondicional -> EQUALS .

    !               reduce using rule 41 (OperadorCondicional -> EQUALS .)
    (               reduce using rule 41 (OperadorCondicional -> EQUALS .)
    NUM             reduce using rule 41 (OperadorCondicional -> EQUALS .)
    ID              reduce using rule 41 (OperadorCondicional -> EQUALS .)
    TRUE            reduce using rule 41 (OperadorCondicional -> EQUALS .)
    FALSE           reduce using rule 41 (OperadorCondicional -> EQUALS .)


state 105

    (42) OperadorCondicional -> NOTEQUALS .

    !               reduce using rule 42 (OperadorCondicional -> NOTEQUALS .)
    (               reduce using rule 42 (OperadorCondicional -> NOTEQUALS .)
    NUM             reduce using rule 42 (OperadorCondicional -> NOTEQUALS .)
    ID              reduce using rule 42 (OperadorCondicional -> NOTEQUALS .)
    TRUE            reduce using rule 42 (OperadorCondicional -> NOTEQUALS .)
    FALSE           reduce using rule 42 (OperadorCondicional -> NOTEQUALS .)


state 106

    (29) ListaCondicionais -> ! ( . ListaCondicionais )
    (34) Condicional -> ! ( . Condicional )
    (27) ListaCondicionais -> . Condicional
    (28) ListaCondicionais -> . ( ListaCondicionais )
    (29) ListaCondicionais -> . ! ( ListaCondicionais )
    (30) ListaCondicionais -> . ListaCondicionais OperadorLogico Condicional
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 61
    !               shift and go to state 64
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    ListaCondicionais              shift and go to state 137
    Condicional                    shift and go to state 138
    Var                            shift and go to state 65

state 107

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) . { BlocosCodigo } ELSE { BlocosCodigo }

    {               shift and go to state 139


state 108

    (44) BlocoWhileDo -> WHILE ( ListaCondicionais ) . DO { BlocosCodigo }

    DO              shift and go to state 140


state 109

    (47) BlocoLerSTDIN -> STRUCTARRAY ID ID = . STDIN ( ) ;

    STDIN           shift and go to state 141


state 110

    (49) Bloco_EscreverSTDOUT -> STDOUT ( Var ) . ;

    ;               shift and go to state 142


state 111

    (50) Bloco_EscreverSTDOUT -> STDOUT ( PAL ) . ;

    ;               shift and go to state 143


state 112

    (51) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID . ID ) ;

    ID              shift and go to state 144


state 113

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) . { BlocosCodigo }

    {               shift and go to state 145


state 114

    (59) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos . ) { BlocosCodigo }
    (61) ListaAtributos -> ListaAtributos . , Atributo

    )               shift and go to state 146
    ,               shift and go to state 147


state 115

    (60) ListaAtributos -> Atributo .

    )               reduce using rule 60 (ListaAtributos -> Atributo .)
    ,               reduce using rule 60 (ListaAtributos -> Atributo .)


state 116

    (62) Atributo -> INT .

    )               reduce using rule 62 (Atributo -> INT .)
    ,               reduce using rule 62 (Atributo -> INT .)


state 117

    (64) Bloco_CALLFUNC -> CALL FUNC ( ) . ;

    ;               shift and go to state 148


state 118

    (66) Bloco_CALLFUNC -> CALL FUNC ( INPUTVar . ) ;
    (68) INPUTVar -> INPUTVar . , Var

    )               shift and go to state 149
    ,               shift and go to state 150


state 119

    (67) INPUTVar -> Var .

    )               reduce using rule 67 (INPUTVar -> Var .)
    ,               reduce using rule 67 (INPUTVar -> Var .)


state 120

    (70) Array -> ARRAYNUM NUM ID ; .

    INT             reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    INTR            reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    ID              reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    IF              reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    IFELSE          reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    WHILE           reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    STRUCTARRAY     reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    STDOUT          reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    COMMENT         reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    RETURN          reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    DEFINE          reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    CALL            reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    ARRAYNUM        reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    ARRAYID         reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    FOR             reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    $end            reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)
    }               reduce using rule 70 (Array -> ARRAYNUM NUM ID ; .)


state 121

    (71) Array -> ARRAYID ID ID ; .

    INT             reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    INTR            reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    ID              reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    IF              reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    IFELSE          reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    WHILE           reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    STRUCTARRAY     reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    STDOUT          reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    COMMENT         reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    RETURN          reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    DEFINE          reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    CALL            reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    ARRAYNUM        reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    ARRAYID         reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    FOR             reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    $end            reduce using rule 71 (Array -> ARRAYID ID ID ; .)
    }               reduce using rule 71 (Array -> ARRAYID ID ID ; .)


state 122

    (35) Condicional -> ( . Condicional )
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    !               shift and go to state 124
    (               shift and go to state 122
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Condicional                    shift and go to state 151
    Var                            shift and go to state 65

state 123

    (73) BlocoFOR -> FOR ID ( Condicional . ) Atribuicao { BlocosCodigo }
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

    )               shift and go to state 152
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

    OperadorCondicional            shift and go to state 99

state 124

    (34) Condicional -> ! . ( Condicional )

    (               shift and go to state 153


state 125

    (6) Declaracao -> INT ID = Expressao ; .

    INT             reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    INTR            reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    ID              reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    IF              reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    IFELSE          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    WHILE           reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    STRUCTARRAY     reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    STDOUT          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    COMMENT         reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    RETURN          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    DEFINE          reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    CALL            reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    ARRAYNUM        reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    ARRAYID         reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    FOR             reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    $end            reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)
    }               reduce using rule 6 (Declaracao -> INT ID = Expressao ; .)


state 126

    (65) Bloco_CALLFUNC -> ID = CALL . FUNC ( ; ) ;

    FUNC            shift and go to state 154


state 127

    (17) Expressao -> Expressao Operador Var .

    ;               reduce using rule 17 (Expressao -> Expressao Operador Var .)
    +               reduce using rule 17 (Expressao -> Expressao Operador Var .)
    -               reduce using rule 17 (Expressao -> Expressao Operador Var .)
    *               reduce using rule 17 (Expressao -> Expressao Operador Var .)
    /               reduce using rule 17 (Expressao -> Expressao Operador Var .)
    %               reduce using rule 17 (Expressao -> Expressao Operador Var .)
    )               reduce using rule 17 (Expressao -> Expressao Operador Var .)


state 128

    (46) BlocoLerSTDIN -> ID = STDIN ( ) . ;

    ;               shift and go to state 155


state 129

    (18) Expressao -> ( Expressao ) .

    ;               reduce using rule 18 (Expressao -> ( Expressao ) .)
    +               reduce using rule 18 (Expressao -> ( Expressao ) .)
    -               reduce using rule 18 (Expressao -> ( Expressao ) .)
    *               reduce using rule 18 (Expressao -> ( Expressao ) .)
    /               reduce using rule 18 (Expressao -> ( Expressao ) .)
    %               reduce using rule 18 (Expressao -> ( Expressao ) .)
    )               reduce using rule 18 (Expressao -> ( Expressao ) .)


state 130

    (65) Bloco_CALLFUNC -> ID = CALL FUNC ( . ; ) ;
    (64) Bloco_CALLFUNC -> CALL FUNC ( . ) ;
    (66) Bloco_CALLFUNC -> CALL FUNC ( . INPUTVar ) ;
    (67) INPUTVar -> . Var
    (68) INPUTVar -> . INPUTVar , Var
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    ;               shift and go to state 156
    )               shift and go to state 117
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    INPUTVar                       shift and go to state 118
    Var                            shift and go to state 119

state 131

    (7) Declaracao -> INTR ID = Expressao ; .

    INT             reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    INTR            reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    ID              reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    IF              reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    IFELSE          reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    WHILE           reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    STRUCTARRAY     reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    STDOUT          reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    COMMENT         reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    RETURN          reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    DEFINE          reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    CALL            reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    ARRAYNUM        reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    ARRAYID         reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    FOR             reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    $end            reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)
    }               reduce using rule 7 (Declaracao -> INTR ID = Expressao ; .)


state 132

    (28) ListaCondicionais -> ( ListaCondicionais ) .

    )               reduce using rule 28 (ListaCondicionais -> ( ListaCondicionais ) .)
    AND             reduce using rule 28 (ListaCondicionais -> ( ListaCondicionais ) .)
    OR              reduce using rule 28 (ListaCondicionais -> ( ListaCondicionais ) .)


state 133

    (35) Condicional -> ( Condicional ) .

    >               reduce using rule 35 (Condicional -> ( Condicional ) .)
    BIGEQUAL        reduce using rule 35 (Condicional -> ( Condicional ) .)
    <               reduce using rule 35 (Condicional -> ( Condicional ) .)
    LESSEREQUAL     reduce using rule 35 (Condicional -> ( Condicional ) .)
    EQUALS          reduce using rule 35 (Condicional -> ( Condicional ) .)
    NOTEQUALS       reduce using rule 35 (Condicional -> ( Condicional ) .)
    )               reduce using rule 35 (Condicional -> ( Condicional ) .)
    AND             reduce using rule 35 (Condicional -> ( Condicional ) .)
    OR              reduce using rule 35 (Condicional -> ( Condicional ) .)


state 134

    (25) BlocoIF -> IF ( ListaCondicionais ) { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    BlocosCodigo                   shift and go to state 157
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 135

    (30) ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

    )               reduce using rule 30 (ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .)
    AND             reduce using rule 30 (ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .)
    OR              reduce using rule 30 (ListaCondicionais -> ListaCondicionais OperadorLogico Condicional .)
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

    OperadorCondicional            shift and go to state 99

state 136

    (36) Condicional -> Condicional OperadorCondicional Condicional .
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for BIGEQUAL resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESSEREQUAL resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
    )               reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .)
    AND             reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .)
    OR              reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .)
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

  ! >               [ reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! BIGEQUAL        [ reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! <               [ reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! LESSEREQUAL     [ reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! EQUALS          [ reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .) ]
  ! NOTEQUALS       [ reduce using rule 36 (Condicional -> Condicional OperadorCondicional Condicional .) ]

    OperadorCondicional            shift and go to state 99

state 137

    (29) ListaCondicionais -> ! ( ListaCondicionais . )
    (30) ListaCondicionais -> ListaCondicionais . OperadorLogico Condicional
    (31) OperadorLogico -> . AND
    (32) OperadorLogico -> . OR

    )               shift and go to state 158
    AND             shift and go to state 97
    OR              shift and go to state 98

    OperadorLogico                 shift and go to state 96

state 138

    (34) Condicional -> ! ( Condicional . )
    (27) ListaCondicionais -> Condicional .
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 159
    AND             reduce using rule 27 (ListaCondicionais -> Condicional .)
    OR              reduce using rule 27 (ListaCondicionais -> Condicional .)
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

  ! )               [ reduce using rule 27 (ListaCondicionais -> Condicional .) ]

    OperadorCondicional            shift and go to state 99

state 139

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { . BlocosCodigo } ELSE { BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    BlocosCodigo                   shift and go to state 160
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 140

    (44) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO . { BlocosCodigo }

    {               shift and go to state 161


state 141

    (47) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN . ( ) ;

    (               shift and go to state 162


state 142

    (49) Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .

    INT             reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    INTR            reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    ID              reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    IF              reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    IFELSE          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    WHILE           reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    STRUCTARRAY     reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    STDOUT          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    COMMENT         reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    RETURN          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    DEFINE          reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    CALL            reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    ARRAYNUM        reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    ARRAYID         reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    FOR             reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    $end            reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)
    }               reduce using rule 49 (Bloco_EscreverSTDOUT -> STDOUT ( Var ) ; .)


state 143

    (50) Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .

    INT             reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    INTR            reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    ID              reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    IF              reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    IFELSE          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    WHILE           reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    STRUCTARRAY     reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    STDOUT          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    COMMENT         reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    RETURN          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    DEFINE          reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    CALL            reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    ARRAYNUM        reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    ARRAYID         reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    FOR             reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    $end            reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)
    }               reduce using rule 50 (Bloco_EscreverSTDOUT -> STDOUT ( PAL ) ; .)


state 144

    (51) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID . ) ;

    )               shift and go to state 163


state 145

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    BlocosCodigo                   shift and go to state 164
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 146

    (59) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) . { BlocosCodigo }

    {               shift and go to state 165


state 147

    (61) ListaAtributos -> ListaAtributos , . Atributo
    (62) Atributo -> . INT

    INT             shift and go to state 116

    Atributo                       shift and go to state 166

state 148

    (64) Bloco_CALLFUNC -> CALL FUNC ( ) ; .

    INT             reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    INTR            reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    ID              reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    IF              reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    IFELSE          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    WHILE           reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    STRUCTARRAY     reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    STDOUT          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    COMMENT         reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    RETURN          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    DEFINE          reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    CALL            reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    ARRAYNUM        reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    ARRAYID         reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    FOR             reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    $end            reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    }               reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)
    {               reduce using rule 64 (Bloco_CALLFUNC -> CALL FUNC ( ) ; .)


state 149

    (66) Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) . ;

    ;               shift and go to state 167


state 150

    (68) INPUTVar -> INPUTVar , . Var
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Var                            shift and go to state 168

state 151

    (35) Condicional -> ( Condicional . )
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

    )               shift and go to state 133
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

    OperadorCondicional            shift and go to state 99

state 152

    (73) BlocoFOR -> FOR ID ( Condicional ) . Atribuicao { BlocosCodigo }
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC

    ID              shift and go to state 169

    Atribuicao                     shift and go to state 170

state 153

    (34) Condicional -> ! ( . Condicional )
    (33) Condicional -> . Var
    (34) Condicional -> . ! ( Condicional )
    (35) Condicional -> . ( Condicional )
    (36) Condicional -> . Condicional OperadorCondicional Condicional
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    !               shift and go to state 124
    (               shift and go to state 122
    NUM             shift and go to state 57
    ID              shift and go to state 66
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Condicional                    shift and go to state 171
    Var                            shift and go to state 65

state 154

    (65) Bloco_CALLFUNC -> ID = CALL FUNC . ( ; ) ;

    (               shift and go to state 172


state 155

    (46) BlocoLerSTDIN -> ID = STDIN ( ) ; .

    INT             reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    INTR            reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    ID              reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    IF              reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    IFELSE          reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    WHILE           reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    STRUCTARRAY     reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    STDOUT          reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    COMMENT         reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    RETURN          reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    DEFINE          reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    CALL            reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    ARRAYNUM        reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    ARRAYID         reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    FOR             reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    $end            reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)
    }               reduce using rule 46 (BlocoLerSTDIN -> ID = STDIN ( ) ; .)


state 156

    (65) Bloco_CALLFUNC -> ID = CALL FUNC ( ; . ) ;

    )               shift and go to state 173


state 157

    (25) BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 174
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 158

    (29) ListaCondicionais -> ! ( ListaCondicionais ) .

    )               reduce using rule 29 (ListaCondicionais -> ! ( ListaCondicionais ) .)
    AND             reduce using rule 29 (ListaCondicionais -> ! ( ListaCondicionais ) .)
    OR              reduce using rule 29 (ListaCondicionais -> ! ( ListaCondicionais ) .)


state 159

    (34) Condicional -> ! ( Condicional ) .

    >               reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    BIGEQUAL        reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    <               reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    LESSEREQUAL     reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    EQUALS          reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    NOTEQUALS       reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    )               reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    AND             reduce using rule 34 (Condicional -> ! ( Condicional ) .)
    OR              reduce using rule 34 (Condicional -> ! ( Condicional ) .)


state 160

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo . } ELSE { BlocosCodigo }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 175
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 161

    (44) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    BlocosCodigo                   shift and go to state 176
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 162

    (47) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( . ) ;

    )               shift and go to state 177


state 163

    (51) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) . ;

    ;               shift and go to state 178


state 164

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 179
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 165

    (59) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    BlocosCodigo                   shift and go to state 180
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 166

    (61) ListaAtributos -> ListaAtributos , Atributo .

    )               reduce using rule 61 (ListaAtributos -> ListaAtributos , Atributo .)
    ,               reduce using rule 61 (ListaAtributos -> ListaAtributos , Atributo .)


state 167

    (66) Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .

    INT             reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    INTR            reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    ID              reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    IF              reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    IFELSE          reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    WHILE           reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    STRUCTARRAY     reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    STDOUT          reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    COMMENT         reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    RETURN          reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    DEFINE          reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    CALL            reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    ARRAYNUM        reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    ARRAYID         reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    FOR             reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    $end            reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    }               reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)
    {               reduce using rule 66 (Bloco_CALLFUNC -> CALL FUNC ( INPUTVar ) ; .)


state 168

    (68) INPUTVar -> INPUTVar , Var .

    )               reduce using rule 68 (INPUTVar -> INPUTVar , Var .)
    ,               reduce using rule 68 (INPUTVar -> INPUTVar , Var .)


state 169

    (10) Atribuicao -> ID . = Expressao ;
    (11) Atribuicao -> ID . = Bloco_CALLFUNC

    =               shift and go to state 181


state 170

    (73) BlocoFOR -> FOR ID ( Condicional ) Atribuicao . { BlocosCodigo }

    {               shift and go to state 182


state 171

    (34) Condicional -> ! ( Condicional . )
    (36) Condicional -> Condicional . OperadorCondicional Condicional
    (37) OperadorCondicional -> . >
    (38) OperadorCondicional -> . BIGEQUAL
    (39) OperadorCondicional -> . <
    (40) OperadorCondicional -> . LESSEREQUAL
    (41) OperadorCondicional -> . EQUALS
    (42) OperadorCondicional -> . NOTEQUALS

    )               shift and go to state 159
    >               shift and go to state 100
    BIGEQUAL        shift and go to state 101
    <               shift and go to state 102
    LESSEREQUAL     shift and go to state 103
    EQUALS          shift and go to state 104
    NOTEQUALS       shift and go to state 105

    OperadorCondicional            shift and go to state 99

state 172

    (65) Bloco_CALLFUNC -> ID = CALL FUNC ( . ; ) ;

    ;               shift and go to state 156


state 173

    (65) Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) . ;

    ;               shift and go to state 183


state 174

    (25) BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .

    INT             reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    INTR            reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    ID              reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    IF              reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    IFELSE          reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    WHILE           reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    STDOUT          reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    COMMENT         reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    RETURN          reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    DEFINE          reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    CALL            reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    ARRAYID         reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    FOR             reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    $end            reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)
    }               reduce using rule 25 (BlocoIF -> IF ( ListaCondicionais ) { BlocosCodigo } .)


state 175

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } . ELSE { BlocosCodigo }

    ELSE            shift and go to state 184


state 176

    (44) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 185
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 177

    (47) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) . ;

    ;               shift and go to state 186


state 178

    (51) Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .

    INT             reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    INTR            reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    ID              reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    IF              reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    IFELSE          reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    WHILE           reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    STRUCTARRAY     reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    STDOUT          reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    COMMENT         reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    RETURN          reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    DEFINE          reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    CALL            reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    ARRAYNUM        reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    ARRAYID         reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    FOR             reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    $end            reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)
    }               reduce using rule 51 (Bloco_EscreverSTDOUT -> STDOUT ( STRUCTARRAY ID ID ) ; .)


state 179

    (58) Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .

    INT             reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    INTR            reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    ID              reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    IF              reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    IFELSE          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    WHILE           reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    STDOUT          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    COMMENT         reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    RETURN          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    DEFINE          reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    CALL            reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    ARRAYID         reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    FOR             reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    $end            reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)
    }               reduce using rule 58 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ) { BlocosCodigo } .)


state 180

    (59) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 187
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 181

    (10) Atribuicao -> ID = . Expressao ;
    (11) Atribuicao -> ID = . Bloco_CALLFUNC
    (12) Expressao -> . Var
    (17) Expressao -> . Expressao Operador Var
    (18) Expressao -> . ( Expressao )
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (13) Var -> . NUM
    (14) Var -> . ID
    (15) Var -> . TRUE
    (16) Var -> . FALSE

    (               shift and go to state 54
    CALL            shift and go to state 27
    ID              shift and go to state 50
    NUM             shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59

    Expressao                      shift and go to state 51
    Bloco_CALLFUNC                 shift and go to state 52
    Var                            shift and go to state 56

state 182

    (73) BlocoFOR -> FOR ID ( Condicional ) Atribuicao { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Atribuicao                     shift and go to state 5
    BlocosCodigo                   shift and go to state 188
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 183

    (65) Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .

    INT             reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    INTR            reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    ID              reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    IF              reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    IFELSE          reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    WHILE           reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    STRUCTARRAY     reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    STDOUT          reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    COMMENT         reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    RETURN          reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    DEFINE          reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    CALL            reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    ARRAYNUM        reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    ARRAYID         reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    FOR             reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    $end            reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    }               reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)
    {               reduce using rule 65 (Bloco_CALLFUNC -> ID = CALL FUNC ( ; ) ; .)


state 184

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE . { BlocosCodigo }

    {               shift and go to state 189


state 185

    (44) BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .

    INT             reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    INTR            reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    ID              reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    IF              reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    IFELSE          reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    WHILE           reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    STDOUT          reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    COMMENT         reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    RETURN          reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    DEFINE          reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    CALL            reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    ARRAYID         reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    FOR             reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    $end            reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)
    }               reduce using rule 44 (BlocoWhileDo -> WHILE ( ListaCondicionais ) DO { BlocosCodigo } .)


state 186

    (47) BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .

    INT             reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    INTR            reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    ID              reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    IF              reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    IFELSE          reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    WHILE           reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    STRUCTARRAY     reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    STDOUT          reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    COMMENT         reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    RETURN          reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    DEFINE          reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    CALL            reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    ARRAYNUM        reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    ARRAYID         reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    FOR             reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    $end            reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)
    }               reduce using rule 47 (BlocoLerSTDIN -> STRUCTARRAY ID ID = STDIN ( ) ; .)


state 187

    (59) Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .

    INT             reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    INTR            reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    ID              reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    IF              reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    IFELSE          reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    WHILE           reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    STDOUT          reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    COMMENT         reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    RETURN          reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    DEFINE          reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    CALL            reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    ARRAYID         reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    FOR             reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    $end            reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)
    }               reduce using rule 59 (Bloco_DEFINEFUNC -> DEFINE FUNC ( ListaAtributos ) { BlocosCodigo } .)


state 188

    (73) BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 190
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Atribuicao                     shift and go to state 5
    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 189

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { . BlocosCodigo }
    (2) BlocosCodigo -> . Codigo
    (3) BlocosCodigo -> . BlocosCodigo Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    BlocosCodigo                   shift and go to state 191
    Codigo                         shift and go to state 3
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 190

    (73) BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .

    INT             reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    INTR            reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    ID              reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    IF              reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    IFELSE          reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    WHILE           reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    STDOUT          reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    COMMENT         reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    RETURN          reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    DEFINE          reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    CALL            reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    ARRAYID         reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    FOR             reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    $end            reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)
    }               reduce using rule 73 (BlocoFOR -> FOR ID ( Condicional ) Atribuicao { BlocosCodigo } .)


state 191

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo . }
    (3) BlocosCodigo -> BlocosCodigo . Codigo
    (4) Codigo -> . Declaracao
    (9) Codigo -> . Atribuicao
    (24) Codigo -> . BlocoIF
    (43) Codigo -> . BlocoWhileDo
    (45) Codigo -> . BlocoLerSTDIN
    (48) Codigo -> . Bloco_EscreverSTDOUT
    (52) Codigo -> . Bloco_Comentario
    (54) Codigo -> . Bloco_Return
    (57) Codigo -> . Bloco_DEFINEFUNC
    (63) Codigo -> . Bloco_CALLFUNC
    (69) Codigo -> . Array
    (72) Codigo -> . BlocoFOR
    (5) Declaracao -> . INT ID ;
    (6) Declaracao -> . INT ID = Expressao ;
    (7) Declaracao -> . INTR ID = Expressao ;
    (8) Declaracao -> . INT BlocoLerSTDIN
    (10) Atribuicao -> . ID = Expressao ;
    (11) Atribuicao -> . ID = Bloco_CALLFUNC
    (25) BlocoIF -> . IF ( ListaCondicionais ) { BlocosCodigo }
    (26) BlocoIF -> . IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo }
    (44) BlocoWhileDo -> . WHILE ( ListaCondicionais ) DO { BlocosCodigo }
    (46) BlocoLerSTDIN -> . ID = STDIN ( ) ;
    (47) BlocoLerSTDIN -> . STRUCTARRAY ID ID = STDIN ( ) ;
    (49) Bloco_EscreverSTDOUT -> . STDOUT ( Var ) ;
    (50) Bloco_EscreverSTDOUT -> . STDOUT ( PAL ) ;
    (51) Bloco_EscreverSTDOUT -> . STDOUT ( STRUCTARRAY ID ID ) ;
    (53) Bloco_Comentario -> . COMMENT
    (55) Bloco_Return -> . RETURN ID ;
    (56) Bloco_Return -> . RETURN NUM ;
    (58) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ) { BlocosCodigo }
    (59) Bloco_DEFINEFUNC -> . DEFINE FUNC ( ListaAtributos ) { BlocosCodigo }
    (64) Bloco_CALLFUNC -> . CALL FUNC ( ) ;
    (65) Bloco_CALLFUNC -> . ID = CALL FUNC ( ; ) ;
    (66) Bloco_CALLFUNC -> . CALL FUNC ( INPUTVar ) ;
    (70) Array -> . ARRAYNUM NUM ID ;
    (71) Array -> . ARRAYID ID ID ;
    (73) BlocoFOR -> . FOR ID ( Condicional ) Atribuicao { BlocosCodigo }

    }               shift and go to state 192
    INT             shift and go to state 16
    INTR            shift and go to state 18
    ID              shift and go to state 17
    IF              shift and go to state 19
    IFELSE          shift and go to state 20
    WHILE           shift and go to state 21
    STRUCTARRAY     shift and go to state 22
    STDOUT          shift and go to state 23
    COMMENT         shift and go to state 24
    RETURN          shift and go to state 25
    DEFINE          shift and go to state 26
    CALL            shift and go to state 27
    ARRAYNUM        shift and go to state 28
    ARRAYID         shift and go to state 29
    FOR             shift and go to state 30

    Codigo                         shift and go to state 31
    Declaracao                     shift and go to state 4
    Atribuicao                     shift and go to state 5
    BlocoIF                        shift and go to state 6
    BlocoWhileDo                   shift and go to state 7
    BlocoLerSTDIN                  shift and go to state 8
    Bloco_EscreverSTDOUT           shift and go to state 9
    Bloco_Comentario               shift and go to state 10
    Bloco_Return                   shift and go to state 11
    Bloco_DEFINEFUNC               shift and go to state 12
    Bloco_CALLFUNC                 shift and go to state 13
    Array                          shift and go to state 14
    BlocoFOR                       shift and go to state 15

state 192

    (26) BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .

    INT             reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    INTR            reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    ID              reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    IF              reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    IFELSE          reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    WHILE           reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    STRUCTARRAY     reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    STDOUT          reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    COMMENT         reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    RETURN          reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    DEFINE          reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    CALL            reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    ARRAYNUM        reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    ARRAYID         reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    FOR             reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    $end            reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)
    }               reduce using rule 26 (BlocoIF -> IFELSE ( ListaCondicionais ) { BlocosCodigo } ELSE { BlocosCodigo } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 94 resolved as shift
WARNING: shift/reduce conflict for > in state 136 resolved as shift
WARNING: shift/reduce conflict for BIGEQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for < in state 136 resolved as shift
WARNING: shift/reduce conflict for LESSEREQUAL in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 136 resolved as shift
WARNING: shift/reduce conflict for ) in state 138 resolved as shift
